
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java_cup.runtime.*;
import Painter.WordPainter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserF extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserF() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserF(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserF(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\065\002\000\002\005\006\000\002\021\005\000\002" +
    "\023\005\000\002\023\003\000\002\066\002\000\002\024" +
    "\006\000\002\024\003\000\002\025\010\000\002\025\010" +
    "\000\002\025\007\000\002\025\007\000\002\052\003\000" +
    "\002\054\003\000\002\010\006\000\002\010\004\000\002" +
    "\067\002\000\002\032\012\000\002\070\002\000\002\032" +
    "\012\000\002\032\007\000\002\055\003\000\002\071\002" +
    "\000\002\033\010\000\002\034\005\000\002\034\004\000" +
    "\002\035\004\000\002\035\003\000\002\035\003\000\002" +
    "\036\004\000\002\036\003\000\002\072\002\000\002\040" +
    "\007\000\002\073\002\000\002\040\007\000\002\040\005" +
    "\000\002\056\003\000\002\074\002\000\002\037\006\000" +
    "\002\075\002\000\002\037\006\000\002\037\004\000\002" +
    "\057\003\000\002\076\002\000\002\043\010\000\002\044" +
    "\007\000\002\044\006\000\002\044\006\000\002\044\006" +
    "\000\002\044\005\000\002\044\005\000\002\044\005\000" +
    "\002\044\004\000\002\045\004\000\002\045\003\000\002" +
    "\050\005\000\002\050\003\000\002\046\005\000\002\046" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\077\002\000\002\041\010\000\002\100\002\000" +
    "\002\101\002\000\002\042\013\000\002\102\002\000\002" +
    "\051\006\000\002\103\002\000\002\016\006\000\002\104" +
    "\002\000\002\016\006\000\002\031\007\000\002\031\006" +
    "\000\002\105\002\000\002\031\010\000\002\060\003\000" +
    "\002\026\005\000\002\026\004\000\002\027\004\000\002" +
    "\027\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\004\000\002\030\004\000\002\030\004\000" +
    "\002\030\004\000\002\030\003\000\002\106\002\000\002" +
    "\030\006\000\002\107\002\000\002\030\005\000\002\110" +
    "\002\000\002\030\005\000\002\111\002\000\002\030\005" +
    "\000\002\030\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\004\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\004\000\002\015\004\000\002\015\004" +
    "\000\002\006\006\000\002\006\005\000\002\053\003\000" +
    "\002\007\005\000\002\007\003\000\002\112\002\000\002" +
    "\113\002\000\002\017\011\000\002\020\006\000\002\063" +
    "\003\000\002\064\003\000\002\061\003\000\002\062\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\024\002\uffff\003\020\004\012\005\015\006" +
    "\006\007\005\010\004\011\014\012\011\001\002\000\006" +
    "\036\uff8f\064\uff8f\001\002\000\006\036\uff90\064\uff90\001" +
    "\002\000\006\036\uff92\064\uff92\001\002\000\024\002\ufffa" +
    "\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\001\002\000\024\002\ufffd\003\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\001" +
    "\002\000\006\036\uff8e\064\uff8e\001\002\000\004\036\ufff8" +
    "\001\002\000\004\036\u010a\001\002\000\006\036\uff91\064" +
    "\uff91\001\002\000\004\036\uffeb\001\002\000\004\036\030" +
    "\001\002\000\024\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\001\002\000\024" +
    "\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\001\002\000\024\002\000\003\020" +
    "\004\012\005\015\006\006\007\005\010\004\011\014\012" +
    "\011\001\002\000\024\002\ufffb\003\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\001\002\000" +
    "\004\002\024\001\002\000\004\002\001\001\002\000\024" +
    "\002\ufffe\003\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\012\ufffe\001\002\000\006\070\ufff4\072\ufff4" +
    "\001\002\000\004\064\062\001\002\000\012\056\ufff3\064" +
    "\uffec\070\ufff1\072\ufff1\001\002\000\006\070\033\072\032" +
    "\001\002\000\060\002\ufff6\003\ufff6\004\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\030\ufff6\031\ufff6\036\ufff6\067\ufff6\001\002" +
    "\000\004\036\035\001\002\000\006\070\ufff5\072\ufff5\001" +
    "\002\000\010\056\ufff3\070\ufff1\072\ufff1\001\002\000\004" +
    "\056\037\001\002\000\040\006\006\007\005\010\004\011" +
    "\014\012\011\026\063\027\041\032\042\033\044\034\054" +
    "\035\056\036\043\044\045\063\060\064\062\001\002\000" +
    "\050\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88" +
    "\052\uff88\053\uff88\054\uff88\055\uff88\057\uff88\060\uff88\061" +
    "\uff88\062\uff88\065\uff88\070\uff88\071\uff88\072\uff88\073\uff88" +
    "\001\002\000\050\043\uff80\044\uff80\045\uff80\046\uff80\047" +
    "\uff80\050\uff80\052\uff80\053\uff80\054\uff80\055\uff80\057\uff80" +
    "\060\uff80\061\uff80\062\uff80\065\uff80\070\uff80\071\uff80\072" +
    "\uff80\073\uff80\001\002\000\050\043\uff84\044\uff84\045\uff84" +
    "\046\uff84\047\uff84\050\uff84\052\uff84\053\uff84\054\uff84\055" +
    "\uff84\057\uff84\060\uff84\061\uff84\062\uff84\065\uff84\070\uff84" +
    "\071\uff84\072\uff84\073\uff84\001\002\000\056\037\146\040" +
    "\147\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86" +
    "\052\uff86\053\uff86\054\uff86\055\uff86\057\uff86\060\uff86\061" +
    "\uff86\062\uff86\064\uff6a\065\uff86\070\uff86\071\uff86\072\uff86" +
    "\073\uff86\001\002\000\050\043\uff85\044\uff85\045\uff85\046" +
    "\uff85\047\uff85\050\uff85\052\uff85\053\uff85\054\uff85\055\uff85" +
    "\057\uff85\060\uff85\061\uff85\062\uff85\065\uff85\070\uff85\071" +
    "\uff85\072\uff85\073\uff85\001\002\000\040\006\006\007\005" +
    "\010\004\011\014\012\011\026\063\027\041\032\042\033" +
    "\044\034\054\035\056\036\043\044\045\063\060\064\062" +
    "\001\002\000\040\006\006\007\005\010\004\011\014\012" +
    "\011\026\063\027\041\032\042\033\044\034\054\035\056" +
    "\036\043\044\045\063\060\064\062\001\002\000\050\043" +
    "\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\052\uff87" +
    "\053\uff87\054\uff87\055\uff87\057\uff87\060\uff87\061\uff87\062" +
    "\uff87\065\uff87\070\uff87\071\uff87\072\uff87\073\uff87\001\002" +
    "\000\044\043\101\044\070\045\076\046\077\047\066\050" +
    "\072\052\075\053\100\054\067\055\073\057\104\060\102" +
    "\061\103\062\071\070\ufff2\072\ufff2\073\074\001\002\000" +
    "\004\064\062\001\002\000\050\043\uff8c\044\uff8c\045\uff8c" +
    "\046\uff8c\047\uff8c\050\uff8c\052\uff8c\053\uff8c\054\uff8c\055" +
    "\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\065\uff8c\070\uff8c" +
    "\071\uff8c\072\uff8c\073\uff8c\001\002\000\050\043\uff8a\044" +
    "\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\052\uff8a\053\uff8a" +
    "\054\uff8a\055\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\065" +
    "\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a\001\002\000\050" +
    "\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83\052" +
    "\uff83\053\uff83\054\uff83\055\uff83\057\uff83\060\uff83\061\uff83" +
    "\062\uff83\065\uff83\070\uff83\071\uff83\072\uff83\073\uff83\001" +
    "\002\000\050\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d" +
    "\050\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\057\uff8d\060" +
    "\uff8d\061\uff8d\062\uff8d\065\uff8d\070\uff8d\071\uff8d\072\uff8d" +
    "\073\uff8d\001\002\000\050\043\uff82\044\uff82\045\uff82\046" +
    "\uff82\047\uff82\050\uff82\052\uff82\053\uff82\054\uff82\055\uff82" +
    "\057\uff82\060\uff82\061\uff82\062\uff82\065\uff82\070\uff82\071" +
    "\uff82\072\uff82\073\uff82\001\002\000\004\064\062\001\002" +
    "\000\040\006\006\007\005\010\004\011\014\012\011\026" +
    "\063\027\041\032\042\033\044\034\054\035\056\036\043" +
    "\044\045\063\060\064\062\001\002\000\050\043\uff8b\044" +
    "\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\052\uff8b\053\uff8b" +
    "\054\uff8b\055\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\065" +
    "\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\001\002\000\044" +
    "\006\uff61\007\uff61\010\uff61\011\uff61\012\uff61\026\uff61\027" +
    "\uff61\032\uff61\033\uff61\034\uff61\035\uff61\036\uff61\044\uff61" +
    "\063\uff61\064\uff61\065\uff61\072\uff61\001\002\000\050\043" +
    "\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050\uff81\052\uff81" +
    "\053\uff81\054\uff81\055\uff81\057\uff81\060\uff81\061\uff81\062" +
    "\uff81\065\uff81\070\uff81\071\uff81\072\uff81\073\uff81\001\002" +
    "\000\050\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050" +
    "\uff89\052\uff89\053\uff89\054\uff89\055\uff89\057\uff89\060\uff89" +
    "\061\uff89\062\uff89\065\uff89\070\uff89\071\uff89\072\uff89\073" +
    "\uff89\001\002\000\050\043\101\044\070\045\076\046\077" +
    "\047\066\050\072\052\075\053\100\054\067\055\073\057" +
    "\104\060\102\061\uff6f\062\uff6f\065\uff6f\070\uff6f\071\uff6f" +
    "\072\uff6f\073\uff6f\001\002\000\040\006\006\007\005\010" +
    "\004\011\014\012\011\026\063\027\041\032\042\033\044" +
    "\034\054\035\056\036\043\044\045\063\060\064\062\001" +
    "\002\000\040\006\006\007\005\010\004\011\014\012\011" +
    "\026\063\027\041\032\042\033\044\034\054\035\056\036" +
    "\043\044\045\063\060\064\062\001\002\000\040\006\006" +
    "\007\005\010\004\011\014\012\011\026\063\027\041\032" +
    "\042\033\044\034\054\035\056\036\043\044\045\063\060" +
    "\064\062\001\002\000\040\006\006\007\005\010\004\011" +
    "\014\012\011\026\063\027\041\032\042\033\044\034\054" +
    "\035\056\036\043\044\045\063\060\064\062\001\002\000" +
    "\040\006\006\007\005\010\004\011\014\012\011\026\063" +
    "\027\041\032\042\033\044\034\054\035\056\036\043\044" +
    "\045\063\060\064\062\001\002\000\040\006\006\007\005" +
    "\010\004\011\014\012\011\026\063\027\041\032\042\033" +
    "\044\034\054\035\056\036\043\044\045\063\060\064\062" +
    "\001\002\000\040\006\uff67\007\uff67\010\uff67\011\uff67\012" +
    "\uff67\026\uff67\027\uff67\032\uff67\033\uff67\034\uff67\035\uff67" +
    "\036\uff67\044\uff67\063\uff67\064\uff67\001\002\000\040\006" +
    "\006\007\005\010\004\011\014\012\011\026\063\027\041" +
    "\032\042\033\044\034\054\035\056\036\043\044\045\063" +
    "\060\064\062\001\002\000\040\006\006\007\005\010\004" +
    "\011\014\012\011\026\063\027\041\032\042\033\044\034" +
    "\054\035\056\036\043\044\045\063\060\064\062\001\002" +
    "\000\040\006\006\007\005\010\004\011\014\012\011\026" +
    "\063\027\041\032\042\033\044\034\054\035\056\036\043" +
    "\044\045\063\060\064\062\001\002\000\040\006\006\007" +
    "\005\010\004\011\014\012\011\026\063\027\041\032\042" +
    "\033\044\034\054\035\056\036\043\044\045\063\060\064" +
    "\062\001\002\000\040\006\006\007\005\010\004\011\014" +
    "\012\011\026\063\027\041\032\042\033\044\034\054\035" +
    "\056\036\043\044\045\063\060\064\062\001\002\000\040" +
    "\006\006\007\005\010\004\011\014\012\011\026\063\027" +
    "\041\032\042\033\044\034\054\035\056\036\043\044\045" +
    "\063\060\064\062\001\002\000\040\006\006\007\005\010" +
    "\004\011\014\012\011\026\063\027\041\032\042\033\044" +
    "\034\054\035\056\036\043\044\045\063\060\064\062\001" +
    "\002\000\040\006\006\007\005\010\004\011\014\012\011" +
    "\026\063\027\041\032\042\033\044\034\054\035\056\036" +
    "\043\044\045\063\060\064\062\001\002\000\050\043\101" +
    "\044\070\045\076\046\077\047\066\050\072\052\uff73\053" +
    "\uff73\054\uff73\055\uff73\057\uff73\060\uff73\061\uff73\062\uff73" +
    "\065\uff73\070\uff73\071\uff73\072\uff73\073\uff73\001\002\000" +
    "\050\043\101\044\070\045\076\046\077\047\066\050\072" +
    "\052\075\053\100\054\067\055\073\057\104\060\102\061" +
    "\uff71\062\uff71\065\uff71\070\uff71\071\uff71\072\uff71\073\uff71" +
    "\001\002\000\050\043\101\044\070\045\076\046\077\047" +
    "\066\050\072\052\uff72\053\uff72\054\uff72\055\uff72\057\uff72" +
    "\060\uff72\061\uff72\062\uff72\065\uff72\070\uff72\071\uff72\072" +
    "\uff72\073\uff72\001\002\000\050\043\uff7e\044\uff7e\045\076" +
    "\046\077\047\066\050\072\052\uff7e\053\uff7e\054\uff7e\055" +
    "\uff7e\057\uff7e\060\uff7e\061\uff7e\062\uff7e\065\uff7e\070\uff7e" +
    "\071\uff7e\072\uff7e\073\uff7e\001\002\000\050\043\101\044" +
    "\070\045\076\046\077\047\066\050\072\052\uff76\053\uff76" +
    "\054\067\055\073\057\104\060\102\061\uff76\062\uff76\065" +
    "\uff76\070\uff76\071\uff76\072\uff76\073\uff76\001\002\000\050" +
    "\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047\066\050\uff7b\052" +
    "\uff7b\053\uff7b\054\uff7b\055\uff7b\057\uff7b\060\uff7b\061\uff7b" +
    "\062\uff7b\065\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b\001" +
    "\002\000\050\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047\066" +
    "\050\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\057\uff7c\060" +
    "\uff7c\061\uff7c\062\uff7c\065\uff7c\070\uff7c\071\uff7c\072\uff7c" +
    "\073\uff7c\001\002\000\050\043\101\044\070\045\076\046" +
    "\077\047\066\050\072\052\uff77\053\uff77\054\067\055\073" +
    "\057\104\060\102\061\uff77\062\uff77\065\uff77\070\uff77\071" +
    "\uff77\072\uff77\073\uff77\001\002\000\040\006\006\007\005" +
    "\010\004\011\014\012\011\026\063\027\041\032\042\033" +
    "\044\034\054\035\056\036\043\044\045\063\060\064\062" +
    "\001\002\000\042\043\101\044\070\045\076\046\077\047" +
    "\066\050\072\052\075\053\100\054\067\055\073\057\104" +
    "\060\102\061\103\062\071\071\117\073\074\001\002\000" +
    "\040\006\uff66\007\uff66\010\uff66\011\uff66\012\uff66\026\uff66" +
    "\027\uff66\032\uff66\033\uff66\034\uff66\035\uff66\036\uff66\044" +
    "\uff66\063\uff66\064\uff66\001\002\000\040\006\006\007\005" +
    "\010\004\011\014\012\011\026\063\027\041\032\042\033" +
    "\044\034\054\035\056\036\043\044\045\063\060\064\062" +
    "\001\002\000\050\043\101\044\070\045\076\046\077\047" +
    "\066\050\072\052\075\053\100\054\067\055\073\057\104" +
    "\060\102\061\103\062\071\065\uff65\070\uff65\071\uff65\072" +
    "\uff65\073\uff65\001\002\000\050\043\101\044\070\045\076" +
    "\046\077\047\066\050\072\052\uff74\053\uff74\054\uff74\055" +
    "\uff74\057\uff74\060\uff74\061\uff74\062\uff74\065\uff74\070\uff74" +
    "\071\uff74\072\uff74\073\uff74\001\002\000\050\043\uff79\044" +
    "\uff79\045\uff79\046\uff79\047\066\050\uff79\052\uff79\053\uff79" +
    "\054\uff79\055\uff79\057\uff79\060\uff79\061\uff79\062\uff79\065" +
    "\uff79\070\uff79\071\uff79\072\uff79\073\uff79\001\002\000\050" +
    "\043\101\044\070\045\076\046\077\047\066\050\072\052" +
    "\075\053\100\054\067\055\073\057\104\060\102\061\103" +
    "\062\uff70\065\uff70\070\uff70\071\uff70\072\uff70\073\uff70\001" +
    "\002\000\050\043\uff7d\044\uff7d\045\076\046\077\047\066" +
    "\050\072\052\uff7d\053\uff7d\054\uff7d\055\uff7d\057\uff7d\060" +
    "\uff7d\061\uff7d\062\uff7d\065\uff7d\070\uff7d\071\uff7d\072\uff7d" +
    "\073\uff7d\001\002\000\050\043\101\044\070\045\076\046" +
    "\077\047\066\050\072\052\uff75\053\uff75\054\uff75\055\uff75" +
    "\057\uff75\060\uff75\061\uff75\062\uff75\065\uff75\070\uff75\071" +
    "\uff75\072\uff75\073\uff75\001\002\000\046\043\uff7a\044\uff7a" +
    "\045\uff7a\046\uff7a\050\uff7a\052\uff7a\053\uff7a\054\uff7a\055" +
    "\uff7a\057\uff7a\060\uff7a\061\uff7a\062\uff7a\065\uff7a\070\uff7a" +
    "\071\uff7a\072\uff7a\073\uff7a\001\002\000\042\006\006\007" +
    "\005\010\004\011\014\012\011\026\063\027\041\032\042" +
    "\033\044\034\054\035\056\036\043\044\045\063\060\064" +
    "\062\065\134\001\002\000\006\065\134\070\136\001\002" +
    "\000\050\043\uff6b\044\uff6b\045\uff6b\046\uff6b\047\uff6b\050" +
    "\uff6b\052\uff6b\053\uff6b\054\uff6b\055\uff6b\057\uff6b\060\uff6b" +
    "\061\uff6b\062\uff6b\065\uff6b\070\uff6b\071\uff6b\072\uff6b\073" +
    "\uff6b\001\002\000\044\043\101\044\070\045\076\046\077" +
    "\047\066\050\072\052\075\053\100\054\067\055\073\057" +
    "\104\060\102\061\103\062\071\065\uff68\070\uff68\073\074" +
    "\001\002\000\052\043\uff60\044\uff60\045\uff60\046\uff60\047" +
    "\uff60\050\uff60\052\uff60\053\uff60\054\uff60\055\uff60\057\uff60" +
    "\060\uff60\061\uff60\062\uff60\065\uff60\066\uff60\070\uff60\071" +
    "\uff60\072\uff60\073\uff60\001\002\000\050\043\uff6c\044\uff6c" +
    "\045\uff6c\046\uff6c\047\uff6c\050\uff6c\052\uff6c\053\uff6c\054" +
    "\uff6c\055\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c\065\uff6c" +
    "\070\uff6c\071\uff6c\072\uff6c\073\uff6c\001\002\000\040\006" +
    "\006\007\005\010\004\011\014\012\011\026\063\027\041" +
    "\032\042\033\044\034\054\035\056\036\043\044\045\063" +
    "\060\064\062\001\002\000\044\043\101\044\070\045\076" +
    "\046\077\047\066\050\072\052\075\053\100\054\067\055" +
    "\073\057\104\060\102\061\103\062\071\065\uff69\070\uff69" +
    "\073\074\001\002\000\040\006\006\007\005\010\004\011" +
    "\014\012\011\026\063\027\041\032\042\033\044\034\054" +
    "\035\056\036\043\044\045\063\060\064\062\001\002\000" +
    "\042\043\101\044\070\045\076\046\077\047\066\050\072" +
    "\052\075\053\100\054\067\055\073\057\104\060\102\061" +
    "\103\062\071\065\134\073\074\001\002\000\050\043\uff64" +
    "\044\uff64\045\uff64\046\uff64\047\uff64\050\uff64\052\uff64\053" +
    "\uff64\054\uff64\055\uff64\057\uff64\060\uff64\061\uff64\062\uff64" +
    "\065\uff64\070\uff64\071\uff64\072\uff64\073\uff64\001\002\000" +
    "\042\043\101\044\070\045\076\046\077\047\066\050\072" +
    "\052\075\053\100\054\067\055\073\057\104\060\102\061" +
    "\103\062\071\065\134\073\074\001\002\000\050\043\uff7f" +
    "\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\052\uff7f\053" +
    "\uff7f\054\uff7f\055\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f" +
    "\065\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\001\002\000" +
    "\050\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78" +
    "\052\uff78\053\uff78\054\uff78\055\uff78\057\uff78\060\uff78\061" +
    "\uff78\062\uff78\065\uff78\070\uff78\071\uff78\072\uff78\073\uff78" +
    "\001\002\000\050\043\uff6e\044\uff6e\045\uff6e\046\uff6e\047" +
    "\uff6e\050\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e\057\uff6e" +
    "\060\uff6e\061\uff6e\062\uff6e\065\uff6e\070\uff6e\071\uff6e\072" +
    "\uff6e\073\uff6e\001\002\000\050\043\uff6d\044\uff6d\045\uff6d" +
    "\046\uff6d\047\uff6d\050\uff6d\052\uff6d\053\uff6d\054\uff6d\055" +
    "\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d\065\uff6d\070\uff6d" +
    "\071\uff6d\072\uff6d\073\uff6d\001\002\000\016\006\006\007" +
    "\005\010\004\011\014\012\011\065\134\001\002\000\004" +
    "\036\u0108\001\002\000\006\065\134\070\u0104\001\002\000" +
    "\004\066\155\001\002\000\024\002\uffee\003\uffee\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\001" +
    "\002\000\052\003\uff63\006\uff63\007\uff63\010\uff63\011\uff63" +
    "\012\uff63\013\uff63\015\uff63\016\uff63\017\uff63\020\uff63\021" +
    "\uff63\022\uff63\023\uff63\024\uff63\025\uff63\030\uff63\031\uff63" +
    "\036\uff63\067\uff63\001\002\000\046\003\200\006\006\007" +
    "\005\010\004\011\014\012\011\013\212\015\166\016\167" +
    "\017\174\020\157\023\162\024\177\025\210\030\164\031" +
    "\176\036\175\067\160\001\002\000\004\064\uffe2\001\002" +
    "\000\062\002\uff62\003\uff62\004\uff62\005\uff62\006\uff62\007" +
    "\uff62\010\uff62\011\uff62\012\uff62\013\uff62\014\uff62\015\uff62" +
    "\016\uff62\017\uff62\020\uff62\021\uff62\022\uff62\023\uff62\024" +
    "\uff62\025\uff62\030\uff62\031\uff62\036\uff62\067\uff62\001\002" +
    "\000\046\003\200\006\006\007\005\010\004\011\014\012" +
    "\011\013\212\015\166\016\167\017\174\020\157\023\162" +
    "\024\177\025\210\030\164\031\176\036\175\067\160\001" +
    "\002\000\004\072\uff95\001\002\000\052\003\uffa7\006\uffa7" +
    "\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\025\uffa7\030\uffa7\031\uffa7\036\uffa7\067\uffa7\001\002\000" +
    "\004\064\uffab\001\002\000\052\003\uffa3\006\uffa3\007\uffa3" +
    "\010\uffa3\011\uffa3\012\uffa3\013\uffa3\015\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3" +
    "\030\uffa3\031\uffa3\036\uffa3\067\uffa3\001\002\000\004\064" +
    "\uffcd\001\002\000\004\064\uffba\001\002\000\004\036\035" +
    "\001\002\000\004\072\274\001\002\000\052\003\uffa5\006" +
    "\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\025\uffa5\030\uffa5\031\uffa5\036\uffa5\067\uffa5\001\002" +
    "\000\004\064\062\001\002\000\004\066\uffb8\001\002\000" +
    "\016\037\146\040\147\041\uffb3\042\uffb1\056\uffb5\064\uff6a" +
    "\001\002\000\004\064\uffad\001\002\000\004\072\uff97\001" +
    "\002\000\052\003\uff93\006\uff93\007\uff93\010\uff93\011\uff93" +
    "\012\uff93\013\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021" +
    "\uff93\022\uff93\023\uff93\024\uff93\025\uff93\030\uff93\031\uff93" +
    "\036\uff93\067\uff93\001\002\000\004\072\235\001\002\000" +
    "\052\003\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4" +
    "\013\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\023\uffa4\024\uffa4\025\uffa4\030\uffa4\031\uffa4\036\uffa4" +
    "\067\uffa4\001\002\000\052\003\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\013\uffa1\015\uffa1\016\uffa1\017\uffa1" +
    "\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\030" +
    "\uffa1\031\uffa1\036\uffa1\067\uffa1\001\002\000\004\072\234" +
    "\001\002\000\052\003\uffa2\006\uffa2\007\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\030\uffa2\031" +
    "\uffa2\036\uffa2\067\uffa2\001\002\000\004\072\233\001\002" +
    "\000\062\002\uffa9\003\uffa9\004\uffa9\005\uffa9\006\uffa9\007" +
    "\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\030\uffa9\031\uffa9\036\uffa9\067\uffa9\001\002" +
    "\000\042\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\026" +
    "\uff9b\027\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b" +
    "\044\uff9b\063\uff9b\064\uff9b\072\uff99\001\002\000\052\003" +
    "\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\024\uffa6\025\uffa6\030\uffa6\031\uffa6\036\uffa6\067\uffa6" +
    "\001\002\000\004\064\uffe3\001\002\000\004\064\062\001" +
    "\002\000\052\003\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c" +
    "\012\uff9c\013\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021" +
    "\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\030\uff9c\031\uff9c" +
    "\036\uff9c\067\uff9c\001\002\000\040\006\006\007\005\010" +
    "\004\011\014\012\011\026\063\027\041\032\042\033\044" +
    "\034\054\035\056\036\043\044\045\063\060\064\062\001" +
    "\002\000\042\043\101\044\070\045\076\046\077\047\066" +
    "\050\072\052\075\053\100\054\067\055\073\057\104\060" +
    "\102\061\103\062\071\065\134\073\074\001\002\000\004" +
    "\066\155\001\002\000\054\003\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\221\015\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\030\uffe4\031\uffe4\036\uffe4\067\uffe4\001\002\000\006" +
    "\013\uffe8\066\uffe6\001\002\000\004\066\155\001\002\000" +
    "\004\013\212\001\002\000\052\003\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\030\uffe7\031\uffe7\036\uffe7\067\uffe7\001\002\000\052\003" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\030\uffe5\031\uffe5\036\uffe5\067\uffe5" +
    "\001\002\000\004\072\232\001\002\000\040\006\006\007" +
    "\005\010\004\011\014\012\011\026\063\027\041\032\042" +
    "\033\044\034\054\035\056\036\043\044\045\063\060\064" +
    "\062\001\002\000\042\043\101\044\070\045\076\046\077" +
    "\047\066\050\072\052\075\053\100\054\067\055\073\057" +
    "\104\060\102\061\103\062\071\072\231\073\074\001\002" +
    "\000\052\003\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012" +
    "\uff9a\013\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\025\uff9a\030\uff9a\031\uff9a\036" +
    "\uff9a\067\uff9a\001\002\000\052\003\uff98\006\uff98\007\uff98" +
    "\010\uff98\011\uff98\012\uff98\013\uff98\015\uff98\016\uff98\017" +
    "\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98" +
    "\030\uff98\031\uff98\036\uff98\067\uff98\001\002\000\052\003" +
    "\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f" +
    "\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023" +
    "\uff9f\024\uff9f\025\uff9f\030\uff9f\031\uff9f\036\uff9f\067\uff9f" +
    "\001\002\000\052\003\uff9e\006\uff9e\007\uff9e\010\uff9e\011" +
    "\uff9e\012\uff9e\013\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e" +
    "\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\030\uff9e\031" +
    "\uff9e\036\uff9e\067\uff9e\001\002\000\052\003\uff9d\006\uff9d" +
    "\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\015\uff9d\016" +
    "\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d" +
    "\025\uff9d\030\uff9d\031\uff9d\036\uff9d\067\uff9d\001\002\000" +
    "\004\072\237\001\002\000\052\003\uff96\006\uff96\007\uff96" +
    "\010\uff96\011\uff96\012\uff96\013\uff96\015\uff96\016\uff96\017" +
    "\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96" +
    "\030\uff96\031\uff96\036\uff96\067\uff96\001\002\000\004\064" +
    "\062\001\002\000\040\006\006\007\005\010\004\011\014" +
    "\012\011\026\063\027\041\032\042\033\044\034\054\035" +
    "\056\036\043\044\045\063\060\064\062\001\002\000\042" +
    "\043\101\044\070\045\076\046\077\047\066\050\072\052" +
    "\075\053\100\054\067\055\073\057\104\060\102\061\103" +
    "\062\071\065\134\073\074\001\002\000\004\072\244\001" +
    "\002\000\052\003\uffac\006\uffac\007\uffac\010\uffac\011\uffac" +
    "\012\uffac\013\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\025\uffac\030\uffac\031\uffac" +
    "\036\uffac\067\uffac\001\002\000\004\042\254\001\002\000" +
    "\004\041\252\001\002\000\004\056\250\001\002\000\040" +
    "\006\006\007\005\010\004\011\014\012\011\026\063\027" +
    "\041\032\042\033\044\034\054\035\056\036\043\044\045" +
    "\063\060\064\062\001\002\000\046\043\101\044\070\045" +
    "\076\046\077\047\066\050\072\052\075\053\100\054\067" +
    "\055\073\057\104\060\102\061\103\062\071\065\uffb4\070" +
    "\uffb4\072\uffb4\073\074\001\002\000\040\006\006\007\005" +
    "\010\004\011\014\012\011\026\063\027\041\032\042\033" +
    "\044\034\054\035\056\036\043\044\045\063\060\064\062" +
    "\001\002\000\046\043\101\044\070\045\076\046\077\047" +
    "\066\050\072\052\075\053\100\054\067\055\073\057\104" +
    "\060\102\061\103\062\071\065\uffb2\070\uffb2\072\uffb2\073" +
    "\074\001\002\000\040\006\006\007\005\010\004\011\014" +
    "\012\011\026\063\027\041\032\042\033\044\034\054\035" +
    "\056\036\043\044\045\063\060\064\062\001\002\000\046" +
    "\043\101\044\070\045\076\046\077\047\066\050\072\052" +
    "\075\053\100\054\067\055\073\057\104\060\102\061\103" +
    "\062\071\065\uffb0\070\uffb0\072\uffb0\073\074\001\002\000" +
    "\004\066\155\001\002\000\004\016\260\001\002\000\004" +
    "\064\uffb7\001\002\000\004\064\062\001\002\000\040\006" +
    "\006\007\005\010\004\011\014\012\011\026\063\027\041" +
    "\032\042\033\044\034\054\035\056\036\043\044\045\063" +
    "\060\064\062\001\002\000\042\043\101\044\070\045\076" +
    "\046\077\047\066\050\072\052\075\053\100\054\067\055" +
    "\073\057\104\060\102\061\103\062\071\065\134\073\074" +
    "\001\002\000\004\072\265\001\002\000\052\003\uffb6\006" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\030\uffb6\031\uffb6\036\uffb6\067\uffb6\001\002" +
    "\000\042\006\006\007\005\010\004\011\014\012\011\026" +
    "\063\027\041\032\042\033\044\034\054\035\056\036\043" +
    "\044\045\063\060\064\062\065\134\001\002\000\004\072" +
    "\273\001\002\000\042\043\101\044\070\045\076\046\077" +
    "\047\066\050\072\052\075\053\100\054\067\055\073\057" +
    "\104\060\102\061\103\062\071\065\134\073\074\001\002" +
    "\000\004\072\272\001\002\000\052\003\uffaf\006\uffaf\007" +
    "\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\015\uffaf\016\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025" +
    "\uffaf\030\uffaf\031\uffaf\036\uffaf\067\uffaf\001\002\000\052" +
    "\003\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013" +
    "\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae" +
    "\023\uffae\024\uffae\025\uffae\030\uffae\031\uffae\036\uffae\067" +
    "\uffae\001\002\000\052\003\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\015\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\030\uffa0" +
    "\031\uffa0\036\uffa0\067\uffa0\001\002\000\004\064\062\001" +
    "\002\000\040\006\006\007\005\010\004\011\014\012\011" +
    "\026\063\027\041\032\042\033\044\034\054\035\056\036" +
    "\043\044\045\063\060\064\062\001\002\000\042\043\101" +
    "\044\070\045\076\046\077\047\066\050\072\052\075\053" +
    "\100\054\067\055\073\057\104\060\102\061\103\062\071" +
    "\065\134\073\074\001\002\000\004\066\155\001\002\000" +
    "\052\003\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\030\uffb9\031\uffb9\036\uffb9" +
    "\067\uffb9\001\002\000\004\064\062\001\002\000\020\006" +
    "\006\007\005\010\004\011\014\012\011\036\312\072\305" +
    "\001\002\000\006\070\333\072\uffc2\001\002\000\042\006" +
    "\006\007\005\010\004\011\014\012\011\026\063\027\041" +
    "\032\042\033\044\034\054\035\056\036\043\044\045\063" +
    "\060\064\062\072\336\001\002\000\004\036\312\001\002" +
    "\000\004\065\134\001\002\000\004\072\313\001\002\000" +
    "\006\070\uffc0\072\uffc0\001\002\000\004\056\uffb5\001\002" +
    "\000\042\006\006\007\005\010\004\011\014\012\011\026" +
    "\063\027\041\032\042\033\044\034\054\035\056\036\043" +
    "\044\045\063\060\064\062\072\315\001\002\000\042\043" +
    "\101\044\070\045\076\046\077\047\066\050\072\052\075" +
    "\053\100\054\067\055\073\057\104\060\102\061\103\062" +
    "\071\072\326\073\074\001\002\000\006\036\321\065\uffc7" +
    "\001\002\000\006\065\uffbe\070\uffbe\001\002\000\006\065" +
    "\uffbd\070\uffbd\001\002\000\006\065\uffc9\070\324\001\002" +
    "\000\014\037\146\040\147\041\uffb3\042\uffb1\056\uffb5\001" +
    "\002\000\006\065\uffbb\070\uffbb\001\002\000\006\065\uffbc" +
    "\070\uffbc\001\002\000\004\036\321\001\002\000\006\065" +
    "\uffbf\070\uffbf\001\002\000\006\036\321\065\uffca\001\002" +
    "\000\006\065\uffcb\070\324\001\002\000\004\066\155\001" +
    "\002\000\052\003\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\030\uffcc\031\uffcc" +
    "\036\uffcc\067\uffcc\001\002\000\006\070\333\072\uffc3\001" +
    "\002\000\004\036\312\001\002\000\006\070\uffc1\072\uffc1" +
    "\001\002\000\042\043\101\044\070\045\076\046\077\047" +
    "\066\050\072\052\075\053\100\054\067\055\073\057\104" +
    "\060\102\061\103\062\071\072\340\073\074\001\002\000" +
    "\006\036\321\065\uffc4\001\002\000\006\065\uffc5\070\324" +
    "\001\002\000\006\036\321\065\uffc6\001\002\000\006\065" +
    "\uffc8\070\324\001\002\000\004\072\343\001\002\000\052" +
    "\003\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94\013" +
    "\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94" +
    "\023\uff94\024\uff94\025\uff94\030\uff94\031\uff94\036\uff94\067" +
    "\uff94\001\002\000\052\003\uffa8\006\uffa8\007\uffa8\010\uffa8" +
    "\011\uffa8\012\uffa8\013\uffa8\015\uffa8\016\uffa8\017\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\030\uffa8" +
    "\031\uffa8\036\uffa8\067\uffa8\001\002\000\062\002\uffaa\003" +
    "\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\030\uffaa" +
    "\031\uffaa\036\uffaa\067\uffaa\001\002\000\004\064\062\001" +
    "\002\000\040\006\006\007\005\010\004\011\014\012\011" +
    "\026\063\027\041\032\042\033\044\034\054\035\056\036" +
    "\043\044\045\063\060\064\062\001\002\000\042\043\101" +
    "\044\070\045\076\046\077\047\066\050\072\052\075\053" +
    "\100\054\067\055\073\057\104\060\102\061\103\062\071" +
    "\065\134\073\074\001\002\000\004\066\155\001\002\000" +
    "\010\021\364\022\354\067\160\001\002\000\052\003\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\030\uffe1\031\uffe1\036\uffe1\067\uffe1\001" +
    "\002\000\004\071\uffce\001\002\000\040\006\006\007\005" +
    "\010\004\011\014\012\011\026\063\027\041\032\042\033" +
    "\044\034\054\035\056\036\043\044\045\063\060\064\062" +
    "\001\002\000\004\067\uffdc\001\002\000\010\021\364\022" +
    "\354\067\uffdd\001\002\000\004\071\366\001\002\000\052" +
    "\003\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\030\uffdf\031\uffdf\036\uffdf\067" +
    "\uffdf\001\002\000\004\067\160\001\002\000\010\021\uffda" +
    "\022\uffda\067\uffda\001\002\000\040\006\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\012\uffd4\026\uffd4\027\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\044\uffd4\063\uffd4\064\uffd4\001" +
    "\002\000\052\003\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\030\uffe0\031\uffe0" +
    "\036\uffe0\067\uffe0\001\002\000\050\003\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\023\uffd3\024\uffd3\025\uffd3\030\uffd3\031" +
    "\uffd3\036\uffd3\066\uffd1\067\uffcf\001\002\000\004\066\155" +
    "\001\002\000\044\003\200\006\006\007\005\010\004\011" +
    "\014\012\011\013\212\015\166\016\167\017\174\020\157" +
    "\023\162\024\177\025\210\030\164\031\176\036\175\001" +
    "\002\000\046\003\200\006\006\007\005\010\004\011\014" +
    "\012\011\013\212\015\166\016\167\017\174\020\157\023" +
    "\162\024\177\025\210\030\164\031\176\036\175\067\uffd2" +
    "\001\002\000\004\067\uffd0\001\002\000\004\067\uffde\001" +
    "\002\000\010\021\uffdb\022\uffdb\067\uffdb\001\002\000\042" +
    "\043\101\044\070\045\076\046\077\047\066\050\072\052" +
    "\075\053\100\054\067\055\073\057\104\060\102\061\103" +
    "\062\071\071\376\073\074\001\002\000\054\003\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd5\022\uffd5\023\uffd9\024" +
    "\uffd9\025\uffd9\030\uffd9\031\uffd9\036\uffd9\066\uffd7\067\uffd5" +
    "\001\002\000\004\066\155\001\002\000\044\003\200\006" +
    "\006\007\005\010\004\011\014\012\011\013\212\015\166" +
    "\016\167\017\174\020\157\023\162\024\177\025\210\030" +
    "\164\031\176\036\175\001\002\000\052\003\200\006\006" +
    "\007\005\010\004\011\014\012\011\013\212\015\166\016" +
    "\167\017\174\020\157\021\uffd8\022\uffd8\023\162\024\177" +
    "\025\210\030\164\031\176\036\175\067\uffd8\001\002\000" +
    "\010\021\uffd6\022\uffd6\067\uffd6\001\002\000\004\066\155" +
    "\001\002\000\014\006\006\007\005\010\004\011\014\012" +
    "\011\001\002\000\004\036\u0106\001\002\000\006\065\uffea" +
    "\070\uffea\001\002\000\024\002\ufff0\003\ufff0\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\001\002" +
    "\000\006\065\uffe9\070\uffe9\001\002\000\004\064\062\001" +
    "\002\000\004\064\uffec\001\002\000\016\006\006\007\005" +
    "\010\004\011\014\012\011\065\134\001\002\000\006\065" +
    "\134\070\u0104\001\002\000\004\066\155\001\002\000\024" +
    "\002\uffed\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\001\002\000\004\066\155\001\002" +
    "\000\024\002\uffef\003\uffef\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\012\uffef\001\002\000\004\036\u0113" +
    "\001\002\000\004\072\u0114\001\002\000\004\064\uff6a\001" +
    "\002\000\024\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\022\002\022\003\020\004\007\005\016\021" +
    "\021\022\015\025\006\054\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\u0110\001\001" +
    "\000\004\052\u0108\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\023\030\024\025\052\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\024\005\016\021" +
    "\021\022\015\025\006\054\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\147\001\001\000\004\066\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\033\001\001\000\002\001\001\000\004\066\035\001\001" +
    "\000\002\001\001\000\030\006\063\011\047\012\054\013" +
    "\051\014\060\015\052\017\037\020\046\022\050\053\056" +
    "\061\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\063\011\144\012\054\013\051\014\060\015\052\017" +
    "\037\020\046\022\050\053\056\061\045\001\001\000\030" +
    "\006\063\011\142\012\054\013\051\014\060\015\052\017" +
    "\037\020\046\022\050\053\056\061\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\127\001\001\000" +
    "\030\006\063\011\064\012\054\013\051\014\060\015\052" +
    "\017\037\020\046\022\050\053\056\061\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\006\063\011\126\012" +
    "\054\013\051\014\060\015\052\017\037\020\046\022\050" +
    "\053\056\061\045\001\001\000\030\006\063\011\125\012" +
    "\054\013\051\014\060\015\052\017\037\020\046\022\050" +
    "\053\056\061\045\001\001\000\030\006\063\011\124\012" +
    "\054\013\051\014\060\015\052\017\037\020\046\022\050" +
    "\053\056\061\045\001\001\000\030\006\063\011\123\012" +
    "\054\013\051\014\060\015\052\017\037\020\046\022\050" +
    "\053\056\061\045\001\001\000\030\006\063\011\122\012" +
    "\054\013\051\014\060\015\052\017\037\020\046\022\050" +
    "\053\056\061\045\001\001\000\030\006\063\011\121\012" +
    "\054\013\051\014\060\015\052\017\037\020\046\022\050" +
    "\053\056\061\045\001\001\000\004\112\114\001\001\000" +
    "\030\006\063\011\113\012\054\013\051\014\060\015\052" +
    "\017\037\020\046\022\050\053\056\061\045\001\001\000" +
    "\030\006\063\011\112\012\054\013\051\014\060\015\052" +
    "\017\037\020\046\022\050\053\056\061\045\001\001\000" +
    "\030\006\063\011\111\012\054\013\051\014\060\015\052" +
    "\017\037\020\046\022\050\053\056\061\045\001\001\000" +
    "\030\006\063\011\110\012\054\013\051\014\060\015\052" +
    "\017\037\020\046\022\050\053\056\061\045\001\001\000" +
    "\030\006\063\011\107\012\054\013\051\014\060\015\052" +
    "\017\037\020\046\022\050\053\056\061\045\001\001\000" +
    "\030\006\063\011\106\012\054\013\051\014\060\015\052" +
    "\017\037\020\046\022\050\053\056\061\045\001\001\000" +
    "\030\006\063\011\105\012\054\013\051\014\060\015\052" +
    "\017\037\020\046\022\050\053\056\061\045\001\001\000" +
    "\030\006\063\011\104\012\054\013\051\014\060\015\052" +
    "\017\037\020\046\022\050\053\056\061\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\063\011\115\012\054" +
    "\013\051\014\060\015\052\017\037\020\046\022\050\053" +
    "\056\061\045\001\001\000\002\001\001\000\004\113\117" +
    "\001\001\000\030\006\063\011\120\012\054\013\051\014" +
    "\060\015\052\017\037\020\046\022\050\053\056\061\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\063\007\130\011\132\012" +
    "\054\013\051\014\060\015\052\017\037\020\046\022\050" +
    "\053\056\061\045\062\131\001\001\000\004\062\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\063\011\136\012\054\013" +
    "\051\014\060\015\052\017\037\020\046\022\050\053\056" +
    "\061\045\001\001\000\002\001\001\000\030\006\063\011" +
    "\140\012\054\013\051\014\060\015\052\017\037\020\046" +
    "\022\050\053\056\061\045\001\001\000\004\062\141\001" +
    "\001\000\002\001\001\000\004\062\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\151\022\150\062\152\001\001\000\002" +
    "\001\001\000\004\062\u0102\001\001\000\006\026\153\063" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\006\200\015\203\016\205\021\210\022\167\027\160\030" +
    "\162\031\213\032\171\033\201\041\204\042\202\043\164" +
    "\051\170\053\056\055\212\060\172\064\206\001\001\000" +
    "\004\071\345\001\001\000\002\001\001\000\044\006\200" +
    "\015\203\016\205\021\210\022\167\030\343\031\213\032" +
    "\171\033\201\041\204\042\202\043\164\051\170\053\056" +
    "\055\212\060\172\064\344\001\001\000\004\111\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\076\301\001\001\000\004\077\274\001\001\000" +
    "\006\023\030\024\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\265\001\001\000\004\100\255\001" +
    "\001\000\010\102\246\103\245\104\244\001\001\000\004" +
    "\105\237\001\001\000\004\110\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\106\226\107\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\214\001\001\000" +
    "\002\001\001\000\030\006\063\011\215\012\054\013\051" +
    "\014\060\015\052\017\037\020\046\022\050\053\056\061" +
    "\045\001\001\000\004\062\216\001\001\000\006\026\217" +
    "\063\155\001\001\000\002\001\001\000\006\067\222\070" +
    "\221\001\001\000\006\026\224\063\155\001\001\000\006" +
    "\032\223\055\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\063\011\227\012\054" +
    "\013\051\014\060\015\052\017\037\020\046\022\050\053" +
    "\056\061\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\240\001\001\000\030\006\063\011\241\012\054\013" +
    "\051\014\060\015\052\017\037\020\046\022\050\053\056" +
    "\061\045\001\001\000\004\062\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\063\011\250\012\054\013" +
    "\051\014\060\015\052\017\037\020\046\022\050\053\056" +
    "\061\045\001\001\000\002\001\001\000\030\006\063\011" +
    "\252\012\054\013\051\014\060\015\052\017\037\020\046" +
    "\022\050\053\056\061\045\001\001\000\002\001\001\000" +
    "\030\006\063\011\254\012\054\013\051\014\060\015\052" +
    "\017\037\020\046\022\050\053\056\061\045\001\001\000" +
    "\002\001\001\000\006\026\256\063\155\001\001\000\002" +
    "\001\001\000\004\101\260\001\001\000\004\061\261\001" +
    "\001\000\030\006\063\011\262\012\054\013\051\014\060" +
    "\015\052\017\037\020\046\022\050\053\056\061\045\001" +
    "\001\000\004\062\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\063\011\267\012\054\013\051\014" +
    "\060\015\052\017\037\020\046\022\050\053\056\061\045" +
    "\062\266\001\001\000\002\001\001\000\004\062\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\275\001\001\000\030\006" +
    "\063\011\276\012\054\013\051\014\060\015\052\017\037" +
    "\020\046\022\050\053\056\061\045\001\001\000\004\062" +
    "\277\001\001\000\006\026\300\063\155\001\001\000\002" +
    "\001\001\000\004\061\302\001\001\000\014\022\305\044" +
    "\306\045\307\050\303\051\310\001\001\000\002\001\001" +
    "\000\030\006\063\011\334\012\054\013\051\014\060\015" +
    "\052\017\037\020\046\022\050\053\056\061\045\001\001" +
    "\000\006\050\331\051\310\001\001\000\004\062\327\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\102\246" +
    "\001\001\000\030\006\063\011\313\012\054\013\051\014" +
    "\060\015\052\017\037\020\046\022\050\053\056\061\045" +
    "\001\001\000\002\001\001\000\014\015\316\016\321\046" +
    "\317\047\315\051\322\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\102\246\103\245\104" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\316\016\321\047\324\051\322\001\001\000\002\001" +
    "\001\000\014\015\316\016\321\046\326\047\315\051\322" +
    "\001\001\000\002\001\001\000\006\026\330\063\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\333" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\015" +
    "\316\016\321\046\336\047\315\051\322\001\001\000\002" +
    "\001\001\000\014\015\316\016\321\046\340\047\315\051" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\346\001\001\000\030\006\063\011\347\012\054\013\051" +
    "\014\060\015\052\017\037\020\046\022\050\053\056\061" +
    "\045\001\001\000\004\062\350\001\001\000\006\034\352" +
    "\063\351\001\001\000\020\035\361\036\356\037\355\040" +
    "\362\056\354\057\357\064\360\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\063\011\374\012\054\013" +
    "\051\014\060\015\052\017\037\020\046\022\050\053\056" +
    "\061\045\001\001\000\002\001\001\000\012\037\372\040" +
    "\373\056\354\057\357\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\364\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\074\367\075\366" +
    "\001\001\000\006\026\371\063\155\001\001\000\044\006" +
    "\200\015\203\016\205\021\210\022\167\027\370\030\162" +
    "\031\213\032\171\033\201\041\204\042\202\043\164\051" +
    "\170\053\056\055\212\060\172\001\001\000\042\006\200" +
    "\015\203\016\205\021\210\022\167\030\343\031\213\032" +
    "\171\033\201\041\204\042\202\043\164\051\170\053\056" +
    "\055\212\060\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\072\377" +
    "\073\376\001\001\000\006\026\u0101\063\155\001\001\000" +
    "\044\006\200\015\203\016\205\021\210\022\167\027\u0100" +
    "\030\162\031\213\032\171\033\201\041\204\042\202\043" +
    "\164\051\170\053\056\055\212\060\172\001\001\000\042" +
    "\006\200\015\203\016\205\021\210\022\167\030\343\031" +
    "\213\032\171\033\201\041\204\042\202\043\164\051\170" +
    "\053\056\055\212\060\172\001\001\000\002\001\001\000" +
    "\006\026\u0106\063\155\001\001\000\004\022\u0104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\u010a\001\001\000\002\001\001" +
    "\000\010\010\u010b\022\150\062\u010c\001\001\000\004\062" +
    "\u010e\001\001\000\006\026\u010d\063\155\001\001\000\002" +
    "\001\001\000\006\026\u010f\063\155\001\001\000\002\001" +
    "\001\000\006\006\u0111\053\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserF$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserF$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserF$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ScannerF s;
    int nIB = 0;
    WordPainter painter;
    @SuppressWarnings("deprecation")
    public ParserF(ScannerF s, WordPainter painter) {
        super(s);
        this.s = s;
        this.painter = painter;
    }
    public void syntax_error(Symbol sym) {
        painter.SERROR(sym.left, sym.right);
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserF$actions {
  private final ParserF parser;

  /** Constructor */
  CUP$ParserF$actions(ParserF parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action_part00000000(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserF$result;

      /* select the action based on the action number */
      switch (CUP$ParserF$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		RESULT = start_val;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserF$parser.done_parsing();
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= INSTSGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTSGLOBAL ::= INSTSGLOBAL INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTSGLOBAL ::= INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTGLOBAL ::= CALLMAINFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTGLOBAL ::= INITVAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTGLOBAL ::= DECLFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTGLOBAL ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              String RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String mn = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW4(mnleft, mnright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CALLMAINFUNC ::= RW_main NT$0 CALLFUNC TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String mn = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLMAINFUNC",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INITVAR ::= TYPE INITIDS TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITVAR",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INITIDS ::= INITIDS TK_comma INITID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIDS",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INITIDS ::= INITID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIDS",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$1",52, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INITID ::= TK_id NT$1 TK_equ EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITID",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INITID ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITID",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLFUNC ::= TYPE IDCOLORFNC COLORLPAR LISTPARAMS COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLFUNC ::= VOIDCOLOR IDCOLORFNC COLORLPAR LISTPARAMS COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLFUNC ::= TYPE IDCOLORFNC COLORLPAR COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLFUNC ::= VOIDCOLOR IDCOLORFNC COLORLPAR COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IDCOLORFNC ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IDCOLORFNC",40, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VOIDCOLOR ::= RW_void 
            {
              String RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(vdleft, vdright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("VOIDCOLOR",42, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTPARAMS ::= LISTPARAMS TK_comma TYPE TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTPARAMS ::= TYPE TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(elleft, elright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$2",53, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IF ::= IFCOLOR COLORLPAR EXP COLORRPAR ENV RW_else NT$2 IF 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-7)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(elleft, elright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$3",54, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IF ::= IFCOLOR COLORLPAR EXP COLORRPAR ENV RW_else NT$3 ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-7)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF ::= IFCOLOR COLORLPAR EXP COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IFCOLOR ::= RW_if 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(ileft, iright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFCOLOR",43, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$4 ::= 
            {
              String RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(swleft, swright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$4",55, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SWITCH ::= RW_switch NT$4 COLORLPAR EXP COLORRPAR ENVS 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SWITCH",25, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ENVS ::= COLORLBRC CASESDEFAULT COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVS",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ENVS ::= COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVS",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CASESDEFAULT ::= CASES DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CASESDEFAULT ::= CASES 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CASESDEFAULT ::= DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$5 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$5",56, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CASE ::= CASECOLOR EXP TK_colon NT$5 INSTRUCTIONS 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",30, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$6 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$6",57, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASE ::= CASECOLOR EXP TK_colon NT$6 ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",30, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASE ::= CASECOLOR EXP TK_colon 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",30, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASECOLOR ::= RW_case 
            {
              String RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(csleft, csright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASECOLOR",44, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$7 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$7",58, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DEFAULT ::= DEFAULTCOLOR TK_colon NT$7 INSTRUCTIONS 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$8 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$8",59, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DEFAULT ::= DEFAULTCOLOR TK_colon NT$8 ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DEFAULT ::= DEFAULTCOLOR TK_colon 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DEFAULTCOLOR ::= RW_default 
            {
              String RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String df = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(dfleft, dfright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULTCOLOR",45, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$9 ::= 
            {
              String RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(frleft, frright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$9",60, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FOR ::= RW_for NT$9 COLORLPAR ARGSFOR COLORRPAR ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int frleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("FOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARGSFOR ::= INITIALIZE TK_semicolon EXP TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARGSFOR ::= INITIALIZE TK_semicolon EXP TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARGSFOR ::= INITIALIZE TK_semicolon TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARGSFOR ::= TK_semicolon EXP TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARGSFOR ::= INITIALIZE TK_semicolon TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARGSFOR ::= TK_semicolon EXP TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARGSFOR ::= TK_semicolon TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARGSFOR ::= TK_semicolon TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INITIALIZE ::= TYPE ASSIGNS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIALIZE",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INITIALIZE ::= ASSIGNS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIALIZE",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASSIGNS ::= ASSIGNS TK_comma ASSIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ASSIGNS",38, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASSIGNS ::= ASSIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ASSIGNS",38, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // UPDATESFOR ::= UPDATESFOR TK_comma UPDATEFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATESFOR",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // UPDATESFOR ::= UPDATEFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATESFOR",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // UPDATEFOR ::= INCDEC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // UPDATEFOR ::= ASSIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // UPDATEFOR ::= ADDSUB 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$10 ::= 
            {
              String RESULT =null;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(whlleft, whlright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$10",61, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // WHILE ::= RW_while NT$10 COLORLPAR EXP COLORRPAR ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("WHILE",31, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$11 ::= 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(dleft, dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$11",62, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$12 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(whlleft, whlright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$12",63, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DOWHILE ::= RW_do NT$11 ENV RW_while NT$12 COLORLPAR EXP COLORRPAR TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DOWHILE",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$13 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$13",64, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASSIGN ::= TK_id NT$13 TK_equ EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ASSIGN",39, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$14 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$14",65, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ADDSUB ::= TK_id NT$14 TK_add EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ADDSUB",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$15 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$15",66, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ADDSUB ::= TK_id NT$15 TK_sub EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ADDSUB",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PRINT ::= PRINTCOLOR COLORLPAR EXP COLORRPAR TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PRINT ::= PRINTCOLOR COLORLPAR COLORRPAR TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$16 ::= 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.USEFNC(pleft, pright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$16",67, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PRINT ::= RW_print NT$16 COLORLPAR EXP COLORRPAR TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PRINTCOLOR ::= RW_println 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEFNC(pleft, pright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINTCOLOR",46, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ENV ::= COLORLBRC INSTRUCTIONS COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENV",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ENV ::= COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENV",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTRUCTIONS ::= INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTRUCTION ::= INITVAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INSTRUCTION ::= IF 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INSTRUCTION ::= SWITCH 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INSTRUCTION ::= FOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INSTRUCTION ::= WHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INSTRUCTION ::= DOWHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INSTRUCTION ::= ASSIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INSTRUCTION ::= ADDSUB TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INSTRUCTION ::= INCDEC TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INSTRUCTION ::= CALLFUNC TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INSTRUCTION ::= PRINT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$17 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$17",68, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INSTRUCTION ::= RW_return NT$17 EXP TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$18 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$18",69, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INSTRUCTION ::= RW_return NT$18 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$19 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$19",70, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INSTRUCTION ::= RW_continue NT$19 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$20 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$20",71, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INSTRUCTION ::= RW_break NT$20 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INSTRUCTION ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TYPE ::= RW_String 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW5(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TYPE ::= RW_int 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TYPE ::= RW_boolean 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TYPE ::= RW_char 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TYPE ::= RW_double 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP ::= ARITHMETICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP ::= RELATIONALS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP ::= LOGICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP ::= INCDEC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP ::= CALLFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP ::= TERNARY 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= CAST 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP ::= TK_id 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEVARIABLE(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP ::= TK_string 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.STRING(trleft, trright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXP ::= TK_char 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.CHAR(trleft, trright);       
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXP ::= TK_int 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXP ::= TK_double 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXP ::= RW_true 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);        
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXP ::= RW_false 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);        
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXP ::= COLORLPAR EXP COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ARITHMETICS ::= EXP TK_div EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ARITHMETICS ::= EXP TK_pow EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ARITHMETICS ::= EXP TK_mod EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ARITHMETICS ::= TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // RELATIONALS ::= EXP TK_equequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // RELATIONALS ::= EXP TK_notequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // RELATIONALS ::= EXP TK_lessequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // RELATIONALS ::= EXP TK_moreequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // RELATIONALS ::= EXP TK_less EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // RELATIONALS ::= EXP TK_more EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // LOGICS ::= EXP TK_and EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // LOGICS ::= EXP TK_or EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // LOGICS ::= TK_not EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // INCDEC ::= TK_id TK_inc 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INCDEC",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // INCDEC ::= TK_id TK_dec 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INCDEC",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CALLFUNC ::= IDCOLORUSEFNC COLORLPAR LISTARGS COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLFUNC",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CALLFUNC ::= IDCOLORUSEFNC COLORLPAR COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLFUNC",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // IDCOLORUSEFNC ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEFNC(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IDCOLORUSEFNC",41, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LISTARGS ::= LISTARGS TK_comma EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTARGS",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // LISTARGS ::= EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTARGS",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$21 ::= 
            {
              String RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(qleft, qright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$21",72, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$22 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$22",73, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TERNARY ::= EXP TK_question NT$21 EXP TK_colon NT$22 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TERNARY",13, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CAST ::= TYPE COLORLPAR EXP COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CAST",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // COLORLBRC ::= TK_lbrc 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORLBRC",49, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // COLORRBRC ::= TK_rbrc 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORRBRC",50, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // COLORLPAR ::= TK_lpar 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORLPAR",47, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // COLORRPAR ::= TK_rpar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORRPAR",48, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserF$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
              return CUP$ParserF$do_action_part00000000(
                               CUP$ParserF$act_num,
                               CUP$ParserF$parser,
                               CUP$ParserF$stack,
                               CUP$ParserF$top);
    }
}

}
