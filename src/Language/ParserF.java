
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java_cup.runtime.*;
import Painter.WordPainter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserF extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserF() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserF(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserF(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\065\002\000\002\005\006\000\002\006\006\000\002" +
    "\006\005\000\002\053\003\000\002\007\005\000\002\007" +
    "\003\000\002\021\005\000\002\023\005\000\002\023\003" +
    "\000\002\066\002\000\002\024\006\000\002\024\003\000" +
    "\002\025\010\000\002\025\010\000\002\025\007\000\002" +
    "\025\007\000\002\052\003\000\002\054\003\000\002\010" +
    "\006\000\002\010\004\000\002\067\002\000\002\032\012" +
    "\000\002\070\002\000\002\032\012\000\002\032\007\000" +
    "\002\055\003\000\002\071\002\000\002\033\010\000\002" +
    "\034\005\000\002\034\004\000\002\035\004\000\002\035" +
    "\003\000\002\035\003\000\002\036\004\000\002\036\003" +
    "\000\002\072\002\000\002\040\007\000\002\073\002\000" +
    "\002\040\007\000\002\040\005\000\002\056\003\000\002" +
    "\074\002\000\002\037\006\000\002\075\002\000\002\037" +
    "\006\000\002\037\004\000\002\057\003\000\002\076\002" +
    "\000\002\043\010\000\002\044\007\000\002\044\006\000" +
    "\002\044\006\000\002\044\006\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\004\000\002\045" +
    "\004\000\002\045\003\000\002\050\005\000\002\050\003" +
    "\000\002\046\005\000\002\046\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\077\002\000\002" +
    "\041\010\000\002\100\002\000\002\101\002\000\002\042" +
    "\013\000\002\102\002\000\002\051\006\000\002\015\004" +
    "\000\002\015\004\000\002\103\002\000\002\016\006\000" +
    "\002\104\002\000\002\016\006\000\002\105\002\000\002" +
    "\106\002\000\002\017\011\000\002\020\006\000\002\031" +
    "\007\000\002\031\006\000\002\107\002\000\002\031\010" +
    "\000\002\060\003\000\002\026\005\000\002\026\004\000" +
    "\002\027\004\000\002\027\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\004\000\002\030\004" +
    "\000\002\030\004\000\002\030\004\000\002\030\003\000" +
    "\002\110\002\000\002\030\006\000\002\111\002\000\002" +
    "\030\005\000\002\112\002\000\002\030\005\000\002\113" +
    "\002\000\002\030\005\000\002\030\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\004" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\004\000\002\063" +
    "\003\000\002\064\003\000\002\061\003\000\002\062\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\024\002\uffff\003\021\004\012\005\016\006" +
    "\006\007\005\010\004\011\013\012\010\001\002\000\006" +
    "\036\uff84\064\uff84\001\002\000\006\036\uff85\064\uff85\001" +
    "\002\000\006\036\uff87\064\uff87\001\002\000\024\002\ufffa" +
    "\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\001\002\000\006\036\uff83\064\uff83\001\002" +
    "\000\024\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\001\002\000\004\036\ufff8" +
    "\001\002\000\006\036\uff86\064\uff86\001\002\000\004\036" +
    "\u010a\001\002\000\024\002\ufffb\003\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\001\002\000" +
    "\004\036\uffe6\001\002\000\004\036\027\001\002\000\024" +
    "\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\001\002\000\024\002\ufff9\003\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\001\002\000\024\002\000\003\021\004\012\005\016" +
    "\006\006\007\005\010\004\011\013\012\010\001\002\000" +
    "\004\002\024\001\002\000\004\002\001\001\002\000\024" +
    "\002\ufffe\003\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\012\ufffe\001\002\000\006\070\uffef\072\uffef" +
    "\001\002\000\012\056\uffee\064\uffe7\070\uffec\072\uffec\001" +
    "\002\000\004\064\064\001\002\000\006\070\033\072\032" +
    "\001\002\000\060\002\ufff1\003\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\030\ufff1\031\ufff1\036\ufff1\067\ufff1\001\002" +
    "\000\004\036\035\001\002\000\006\070\ufff0\072\ufff0\001" +
    "\002\000\010\056\uffee\070\uffec\072\uffec\001\002\000\004" +
    "\056\037\001\002\000\040\006\006\007\005\010\004\011" +
    "\013\012\010\026\062\027\040\032\042\033\044\034\055" +
    "\035\056\036\043\044\045\063\060\064\064\001\002\000" +
    "\050\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75" +
    "\052\uff75\053\uff75\054\uff75\055\uff75\057\uff75\060\uff75\061" +
    "\uff75\062\uff75\065\uff75\070\uff75\071\uff75\072\uff75\073\uff75" +
    "\001\002\000\050\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047" +
    "\uff7d\050\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\057\uff7d" +
    "\060\uff7d\061\uff7d\062\uff7d\065\uff7d\070\uff7d\071\uff7d\072" +
    "\uff7d\073\uff7d\001\002\000\050\043\uff79\044\uff79\045\uff79" +
    "\046\uff79\047\uff79\050\uff79\052\uff79\053\uff79\054\uff79\055" +
    "\uff79\057\uff79\060\uff79\061\uff79\062\uff79\065\uff79\070\uff79" +
    "\071\uff79\072\uff79\073\uff79\001\002\000\056\037\146\040" +
    "\147\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b" +
    "\052\uff7b\053\uff7b\054\uff7b\055\uff7b\057\uff7b\060\uff7b\061" +
    "\uff7b\062\uff7b\064\ufff4\065\uff7b\070\uff7b\071\uff7b\072\uff7b" +
    "\073\uff7b\001\002\000\050\043\uff7a\044\uff7a\045\uff7a\046" +
    "\uff7a\047\uff7a\050\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a" +
    "\057\uff7a\060\uff7a\061\uff7a\062\uff7a\065\uff7a\070\uff7a\071" +
    "\uff7a\072\uff7a\073\uff7a\001\002\000\040\006\006\007\005" +
    "\010\004\011\013\012\010\026\062\027\040\032\042\033" +
    "\044\034\055\035\056\036\043\044\045\063\060\064\064" +
    "\001\002\000\040\006\006\007\005\010\004\011\013\012" +
    "\010\026\062\027\040\032\042\033\044\034\055\035\056" +
    "\036\043\044\045\063\060\064\064\001\002\000\050\043" +
    "\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\052\uff7c" +
    "\053\uff7c\054\uff7c\055\uff7c\057\uff7c\060\uff7c\061\uff7c\062" +
    "\uff7c\065\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\001\002" +
    "\000\044\043\101\044\067\045\076\046\077\047\070\050" +
    "\072\052\075\053\100\054\066\055\074\057\103\060\102" +
    "\061\104\062\071\070\uffed\072\uffed\073\073\001\002\000" +
    "\004\064\064\001\002\000\050\043\uff81\044\uff81\045\uff81" +
    "\046\uff81\047\uff81\050\uff81\052\uff81\053\uff81\054\uff81\055" +
    "\uff81\057\uff81\060\uff81\061\uff81\062\uff81\065\uff81\070\uff81" +
    "\071\uff81\072\uff81\073\uff81\001\002\000\050\043\uff7f\044" +
    "\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\052\uff7f\053\uff7f" +
    "\054\uff7f\055\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f\065" +
    "\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\001\002\000\050" +
    "\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82\052" +
    "\uff82\053\uff82\054\uff82\055\uff82\057\uff82\060\uff82\061\uff82" +
    "\062\uff82\065\uff82\070\uff82\071\uff82\072\uff82\073\uff82\001" +
    "\002\000\050\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78" +
    "\050\uff78\052\uff78\053\uff78\054\uff78\055\uff78\057\uff78\060" +
    "\uff78\061\uff78\062\uff78\065\uff78\070\uff78\071\uff78\072\uff78" +
    "\073\uff78\001\002\000\050\043\uff77\044\uff77\045\uff77\046" +
    "\uff77\047\uff77\050\uff77\052\uff77\053\uff77\054\uff77\055\uff77" +
    "\057\uff77\060\uff77\061\uff77\062\uff77\065\uff77\070\uff77\071" +
    "\uff77\072\uff77\073\uff77\001\002\000\004\064\064\001\002" +
    "\000\040\006\006\007\005\010\004\011\013\012\010\026" +
    "\062\027\040\032\042\033\044\034\055\035\056\036\043" +
    "\044\045\063\060\064\064\001\002\000\050\043\uff7e\044" +
    "\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\052\uff7e\053\uff7e" +
    "\054\uff7e\055\uff7e\057\uff7e\060\uff7e\061\uff7e\062\uff7e\065" +
    "\uff7e\070\uff7e\071\uff7e\072\uff7e\073\uff7e\001\002\000\050" +
    "\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76\052" +
    "\uff76\053\uff76\054\uff76\055\uff76\057\uff76\060\uff76\061\uff76" +
    "\062\uff76\065\uff76\070\uff76\071\uff76\072\uff76\073\uff76\001" +
    "\002\000\050\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80" +
    "\050\uff80\052\uff80\053\uff80\054\uff80\055\uff80\057\uff80\060" +
    "\uff80\061\uff80\062\uff80\065\uff80\070\uff80\071\uff80\072\uff80" +
    "\073\uff80\001\002\000\044\006\uff61\007\uff61\010\uff61\011" +
    "\uff61\012\uff61\026\uff61\027\uff61\032\uff61\033\uff61\034\uff61" +
    "\035\uff61\036\uff61\044\uff61\063\uff61\064\uff61\065\uff61\072" +
    "\uff61\001\002\000\050\043\101\044\067\045\076\046\077" +
    "\047\070\050\072\052\075\053\100\054\066\055\074\057" +
    "\103\060\102\061\uff64\062\uff64\065\uff64\070\uff64\071\uff64" +
    "\072\uff64\073\uff64\001\002\000\040\006\006\007\005\010" +
    "\004\011\013\012\010\026\062\027\040\032\042\033\044" +
    "\034\055\035\056\036\043\044\045\063\060\064\064\001" +
    "\002\000\040\006\006\007\005\010\004\011\013\012\010" +
    "\026\062\027\040\032\042\033\044\034\055\035\056\036" +
    "\043\044\045\063\060\064\064\001\002\000\040\006\006" +
    "\007\005\010\004\011\013\012\010\026\062\027\040\032" +
    "\042\033\044\034\055\035\056\036\043\044\045\063\060" +
    "\064\064\001\002\000\040\006\006\007\005\010\004\011" +
    "\013\012\010\026\062\027\040\032\042\033\044\034\055" +
    "\035\056\036\043\044\045\063\060\064\064\001\002\000" +
    "\040\006\006\007\005\010\004\011\013\012\010\026\062" +
    "\027\040\032\042\033\044\034\055\035\056\036\043\044" +
    "\045\063\060\064\064\001\002\000\040\006\uffa8\007\uffa8" +
    "\010\uffa8\011\uffa8\012\uffa8\026\uffa8\027\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\044\uffa8\063\uffa8\064\uffa8" +
    "\001\002\000\040\006\006\007\005\010\004\011\013\012" +
    "\010\026\062\027\040\032\042\033\044\034\055\035\056" +
    "\036\043\044\045\063\060\064\064\001\002\000\040\006" +
    "\006\007\005\010\004\011\013\012\010\026\062\027\040" +
    "\032\042\033\044\034\055\035\056\036\043\044\045\063" +
    "\060\064\064\001\002\000\040\006\006\007\005\010\004" +
    "\011\013\012\010\026\062\027\040\032\042\033\044\034" +
    "\055\035\056\036\043\044\045\063\060\064\064\001\002" +
    "\000\040\006\006\007\005\010\004\011\013\012\010\026" +
    "\062\027\040\032\042\033\044\034\055\035\056\036\043" +
    "\044\045\063\060\064\064\001\002\000\040\006\006\007" +
    "\005\010\004\011\013\012\010\026\062\027\040\032\042" +
    "\033\044\034\055\035\056\036\043\044\045\063\060\064" +
    "\064\001\002\000\040\006\006\007\005\010\004\011\013" +
    "\012\010\026\062\027\040\032\042\033\044\034\055\035" +
    "\056\036\043\044\045\063\060\064\064\001\002\000\040" +
    "\006\006\007\005\010\004\011\013\012\010\026\062\027" +
    "\040\032\042\033\044\034\055\035\056\036\043\044\045" +
    "\063\060\064\064\001\002\000\040\006\006\007\005\010" +
    "\004\011\013\012\010\026\062\027\040\032\042\033\044" +
    "\034\055\035\056\036\043\044\045\063\060\064\064\001" +
    "\002\000\040\006\006\007\005\010\004\011\013\012\010" +
    "\026\062\027\040\032\042\033\044\034\055\035\056\036" +
    "\043\044\045\063\060\064\064\001\002\000\050\043\101" +
    "\044\067\045\076\046\077\047\070\050\072\052\075\053" +
    "\100\054\066\055\074\057\103\060\102\061\uff66\062\uff66" +
    "\065\uff66\070\uff66\071\uff66\072\uff66\073\uff66\001\002\000" +
    "\050\043\101\044\067\045\076\046\077\047\070\050\072" +
    "\052\uff68\053\uff68\054\uff68\055\uff68\057\uff68\060\uff68\061" +
    "\uff68\062\uff68\065\uff68\070\uff68\071\uff68\072\uff68\073\uff68" +
    "\001\002\000\050\043\101\044\067\045\076\046\077\047" +
    "\070\050\072\052\uff67\053\uff67\054\uff67\055\uff67\057\uff67" +
    "\060\uff67\061\uff67\062\uff67\065\uff67\070\uff67\071\uff67\072" +
    "\uff67\073\uff67\001\002\000\050\043\uff73\044\uff73\045\076" +
    "\046\077\047\070\050\072\052\uff73\053\uff73\054\uff73\055" +
    "\uff73\057\uff73\060\uff73\061\uff73\062\uff73\065\uff73\070\uff73" +
    "\071\uff73\072\uff73\073\uff73\001\002\000\050\043\101\044" +
    "\067\045\076\046\077\047\070\050\072\052\uff6b\053\uff6b" +
    "\054\066\055\074\057\103\060\102\061\uff6b\062\uff6b\065" +
    "\uff6b\070\uff6b\071\uff6b\072\uff6b\073\uff6b\001\002\000\050" +
    "\043\uff70\044\uff70\045\uff70\046\uff70\047\070\050\uff70\052" +
    "\uff70\053\uff70\054\uff70\055\uff70\057\uff70\060\uff70\061\uff70" +
    "\062\uff70\065\uff70\070\uff70\071\uff70\072\uff70\073\uff70\001" +
    "\002\000\050\043\uff71\044\uff71\045\uff71\046\uff71\047\070" +
    "\050\uff71\052\uff71\053\uff71\054\uff71\055\uff71\057\uff71\060" +
    "\uff71\061\uff71\062\uff71\065\uff71\070\uff71\071\uff71\072\uff71" +
    "\073\uff71\001\002\000\050\043\101\044\067\045\076\046" +
    "\077\047\070\050\072\052\uff6c\053\uff6c\054\066\055\074" +
    "\057\103\060\102\061\uff6c\062\uff6c\065\uff6c\070\uff6c\071" +
    "\uff6c\072\uff6c\073\uff6c\001\002\000\050\043\101\044\067" +
    "\045\076\046\077\047\070\050\072\052\uff69\053\uff69\054" +
    "\uff69\055\uff69\057\uff69\060\uff69\061\uff69\062\uff69\065\uff69" +
    "\070\uff69\071\uff69\072\uff69\073\uff69\001\002\000\040\006" +
    "\006\007\005\010\004\011\013\012\010\026\062\027\040" +
    "\032\042\033\044\034\055\035\056\036\043\044\045\063" +
    "\060\064\064\001\002\000\042\043\101\044\067\045\076" +
    "\046\077\047\070\050\072\052\075\053\100\054\066\055" +
    "\074\057\103\060\102\061\104\062\071\071\120\073\073" +
    "\001\002\000\040\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012" +
    "\uffa7\026\uffa7\027\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\044\uffa7\063\uffa7\064\uffa7\001\002\000\040\006" +
    "\006\007\005\010\004\011\013\012\010\026\062\027\040" +
    "\032\042\033\044\034\055\035\056\036\043\044\045\063" +
    "\060\064\064\001\002\000\050\043\101\044\067\045\076" +
    "\046\077\047\070\050\072\052\075\053\100\054\066\055" +
    "\074\057\103\060\102\061\104\062\071\065\uffa6\070\uffa6" +
    "\071\uffa6\072\uffa6\073\uffa6\001\002\000\050\043\uff6e\044" +
    "\uff6e\045\uff6e\046\uff6e\047\070\050\uff6e\052\uff6e\053\uff6e" +
    "\054\uff6e\055\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e\065" +
    "\uff6e\070\uff6e\071\uff6e\072\uff6e\073\uff6e\001\002\000\050" +
    "\043\101\044\067\045\076\046\077\047\070\050\072\052" +
    "\075\053\100\054\066\055\074\057\103\060\102\061\104" +
    "\062\uff65\065\uff65\070\uff65\071\uff65\072\uff65\073\uff65\001" +
    "\002\000\046\043\uff6f\044\uff6f\045\uff6f\046\uff6f\050\uff6f" +
    "\052\uff6f\053\uff6f\054\uff6f\055\uff6f\057\uff6f\060\uff6f\061" +
    "\uff6f\062\uff6f\065\uff6f\070\uff6f\071\uff6f\072\uff6f\073\uff6f" +
    "\001\002\000\050\043\uff72\044\uff72\045\076\046\077\047" +
    "\070\050\072\052\uff72\053\uff72\054\uff72\055\uff72\057\uff72" +
    "\060\uff72\061\uff72\062\uff72\065\uff72\070\uff72\071\uff72\072" +
    "\uff72\073\uff72\001\002\000\050\043\101\044\067\045\076" +
    "\046\077\047\070\050\072\052\uff6a\053\uff6a\054\uff6a\055" +
    "\uff6a\057\uff6a\060\uff6a\061\uff6a\062\uff6a\065\uff6a\070\uff6a" +
    "\071\uff6a\072\uff6a\073\uff6a\001\002\000\042\006\006\007" +
    "\005\010\004\011\013\012\010\026\062\027\040\032\042" +
    "\033\044\034\055\035\056\036\043\044\045\063\060\064" +
    "\064\065\134\001\002\000\006\065\134\070\136\001\002" +
    "\000\050\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\057\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\065\ufff5\070\ufff5\071\ufff5\072\ufff5\073" +
    "\ufff5\001\002\000\044\043\101\044\067\045\076\046\077" +
    "\047\070\050\072\052\075\053\100\054\066\055\074\057" +
    "\103\060\102\061\104\062\071\065\ufff2\070\ufff2\073\073" +
    "\001\002\000\052\043\uff60\044\uff60\045\uff60\046\uff60\047" +
    "\uff60\050\uff60\052\uff60\053\uff60\054\uff60\055\uff60\057\uff60" +
    "\060\uff60\061\uff60\062\uff60\065\uff60\066\uff60\070\uff60\071" +
    "\uff60\072\uff60\073\uff60\001\002\000\050\043\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\047\ufff6\050\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\065\ufff6" +
    "\070\ufff6\071\ufff6\072\ufff6\073\ufff6\001\002\000\040\006" +
    "\006\007\005\010\004\011\013\012\010\026\062\027\040" +
    "\032\042\033\044\034\055\035\056\036\043\044\045\063" +
    "\060\064\064\001\002\000\044\043\101\044\067\045\076" +
    "\046\077\047\070\050\072\052\075\053\100\054\066\055" +
    "\074\057\103\060\102\061\104\062\071\065\ufff3\070\ufff3" +
    "\073\073\001\002\000\040\006\006\007\005\010\004\011" +
    "\013\012\010\026\062\027\040\032\042\033\044\034\055" +
    "\035\056\036\043\044\045\063\060\064\064\001\002\000" +
    "\042\043\101\044\067\045\076\046\077\047\070\050\072" +
    "\052\075\053\100\054\066\055\074\057\103\060\102\061" +
    "\104\062\071\065\134\073\073\001\002\000\050\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\052\uffa5\053" +
    "\uffa5\054\uffa5\055\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5" +
    "\065\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\001\002\000" +
    "\042\043\101\044\067\045\076\046\077\047\070\050\072" +
    "\052\075\053\100\054\066\055\074\057\103\060\102\061" +
    "\104\062\071\065\134\073\073\001\002\000\050\043\uff74" +
    "\044\uff74\045\uff74\046\uff74\047\uff74\050\uff74\052\uff74\053" +
    "\uff74\054\uff74\055\uff74\057\uff74\060\uff74\061\uff74\062\uff74" +
    "\065\uff74\070\uff74\071\uff74\072\uff74\073\uff74\001\002\000" +
    "\050\043\uff6d\044\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d" +
    "\052\uff6d\053\uff6d\054\uff6d\055\uff6d\057\uff6d\060\uff6d\061" +
    "\uff6d\062\uff6d\065\uff6d\070\uff6d\071\uff6d\072\uff6d\073\uff6d" +
    "\001\002\000\050\043\uffae\044\uffae\045\uffae\046\uffae\047" +
    "\uffae\050\uffae\052\uffae\053\uffae\054\uffae\055\uffae\057\uffae" +
    "\060\uffae\061\uffae\062\uffae\065\uffae\070\uffae\071\uffae\072" +
    "\uffae\073\uffae\001\002\000\050\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\050\uffad\052\uffad\053\uffad\054\uffad\055" +
    "\uffad\057\uffad\060\uffad\061\uffad\062\uffad\065\uffad\070\uffad" +
    "\071\uffad\072\uffad\073\uffad\001\002\000\016\006\006\007" +
    "\005\010\004\011\013\012\010\065\134\001\002\000\004" +
    "\036\u0108\001\002\000\006\065\134\070\u0104\001\002\000" +
    "\004\066\155\001\002\000\024\002\uffe9\003\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\001" +
    "\002\000\052\003\uff63\006\uff63\007\uff63\010\uff63\011\uff63" +
    "\012\uff63\013\uff63\015\uff63\016\uff63\017\uff63\020\uff63\021" +
    "\uff63\022\uff63\023\uff63\024\uff63\025\uff63\030\uff63\031\uff63" +
    "\036\uff63\067\uff63\001\002\000\046\003\201\006\006\007" +
    "\005\010\004\011\013\012\010\013\212\015\167\016\170" +
    "\017\175\020\160\023\163\024\200\025\211\030\166\031" +
    "\177\036\176\067\161\001\002\000\052\003\uff99\006\uff99" +
    "\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\015\uff99\016" +
    "\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99" +
    "\025\uff99\030\uff99\031\uff99\036\uff99\067\uff99\001\002\000" +
    "\004\064\uffdd\001\002\000\062\002\uff62\003\uff62\004\uff62" +
    "\005\uff62\006\uff62\007\uff62\010\uff62\011\uff62\012\uff62\013" +
    "\uff62\014\uff62\015\uff62\016\uff62\017\uff62\020\uff62\021\uff62" +
    "\022\uff62\023\uff62\024\uff62\025\uff62\030\uff62\031\uff62\036" +
    "\uff62\067\uff62\001\002\000\046\003\201\006\006\007\005" +
    "\010\004\011\013\012\010\013\212\015\167\016\170\017" +
    "\175\020\160\023\163\024\200\025\211\030\166\031\177" +
    "\036\176\067\161\001\002\000\004\072\uff8a\001\002\000" +
    "\052\003\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\013\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\024\uff9c\025\uff9c\030\uff9c\031\uff9c\036\uff9c" +
    "\067\uff9c\001\002\000\052\003\uff96\006\uff96\007\uff96\010" +
    "\uff96\011\uff96\012\uff96\013\uff96\015\uff96\016\uff96\017\uff96" +
    "\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96\030" +
    "\uff96\031\uff96\036\uff96\067\uff96\001\002\000\004\064\uffa0" +
    "\001\002\000\004\064\uffc8\001\002\000\004\064\uffb5\001" +
    "\002\000\004\036\035\001\002\000\052\003\uff9b\006\uff9b" +
    "\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\015\uff9b\016" +
    "\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b" +
    "\025\uff9b\030\uff9b\031\uff9b\036\uff9b\067\uff9b\001\002\000" +
    "\052\003\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98" +
    "\013\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022" +
    "\uff98\023\uff98\024\uff98\025\uff98\030\uff98\031\uff98\036\uff98" +
    "\067\uff98\001\002\000\004\064\064\001\002\000\004\066" +
    "\uffb3\001\002\000\016\037\146\040\147\041\uffac\042\uffaa" +
    "\056\uffb0\064\ufff4\001\002\000\004\064\uffa2\001\002\000" +
    "\004\072\uff8c\001\002\000\052\003\uff88\006\uff88\007\uff88" +
    "\010\uff88\011\uff88\012\uff88\013\uff88\015\uff88\016\uff88\017" +
    "\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88" +
    "\030\uff88\031\uff88\036\uff88\067\uff88\001\002\000\004\072" +
    "\236\001\002\000\004\072\235\001\002\000\004\072\234" +
    "\001\002\000\004\072\233\001\002\000\052\003\uff97\006" +
    "\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\015\uff97" +
    "\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024" +
    "\uff97\025\uff97\030\uff97\031\uff97\036\uff97\067\uff97\001\002" +
    "\000\062\002\uff9e\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007" +
    "\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\030\uff9e\031\uff9e\036\uff9e\067\uff9e\001\002" +
    "\000\052\003\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012" +
    "\uff9a\013\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\025\uff9a\030\uff9a\031\uff9a\036" +
    "\uff9a\067\uff9a\001\002\000\042\006\uff90\007\uff90\010\uff90" +
    "\011\uff90\012\uff90\026\uff90\027\uff90\032\uff90\033\uff90\034" +
    "\uff90\035\uff90\036\uff90\044\uff90\063\uff90\064\uff90\072\uff8e" +
    "\001\002\000\004\064\uffde\001\002\000\004\064\064\001" +
    "\002\000\052\003\uff91\006\uff91\007\uff91\010\uff91\011\uff91" +
    "\012\uff91\013\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021" +
    "\uff91\022\uff91\023\uff91\024\uff91\025\uff91\030\uff91\031\uff91" +
    "\036\uff91\067\uff91\001\002\000\040\006\006\007\005\010" +
    "\004\011\013\012\010\026\062\027\040\032\042\033\044" +
    "\034\055\035\056\036\043\044\045\063\060\064\064\001" +
    "\002\000\042\043\101\044\067\045\076\046\077\047\070" +
    "\050\072\052\075\053\100\054\066\055\074\057\103\060" +
    "\102\061\104\062\071\065\134\073\073\001\002\000\004" +
    "\066\155\001\002\000\054\003\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\014\221\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\030\uffdf\031\uffdf\036\uffdf\067\uffdf\001\002\000\006" +
    "\013\uffe3\066\uffe1\001\002\000\004\066\155\001\002\000" +
    "\004\013\212\001\002\000\052\003\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\030\uffe2\031\uffe2\036\uffe2\067\uffe2\001\002\000\052\003" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\030\uffe0\031\uffe0\036\uffe0\067\uffe0" +
    "\001\002\000\004\072\232\001\002\000\040\006\006\007" +
    "\005\010\004\011\013\012\010\026\062\027\040\032\042" +
    "\033\044\034\055\035\056\036\043\044\045\063\060\064" +
    "\064\001\002\000\042\043\101\044\067\045\076\046\077" +
    "\047\070\050\072\052\075\053\100\054\066\055\074\057" +
    "\103\060\102\061\104\062\071\072\231\073\073\001\002" +
    "\000\052\003\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012" +
    "\uff8f\013\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f" +
    "\022\uff8f\023\uff8f\024\uff8f\025\uff8f\030\uff8f\031\uff8f\036" +
    "\uff8f\067\uff8f\001\002\000\052\003\uff8d\006\uff8d\007\uff8d" +
    "\010\uff8d\011\uff8d\012\uff8d\013\uff8d\015\uff8d\016\uff8d\017" +
    "\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d" +
    "\030\uff8d\031\uff8d\036\uff8d\067\uff8d\001\002\000\052\003" +
    "\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94" +
    "\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023" +
    "\uff94\024\uff94\025\uff94\030\uff94\031\uff94\036\uff94\067\uff94" +
    "\001\002\000\052\003\uff93\006\uff93\007\uff93\010\uff93\011" +
    "\uff93\012\uff93\013\uff93\015\uff93\016\uff93\017\uff93\020\uff93" +
    "\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93\030\uff93\031" +
    "\uff93\036\uff93\067\uff93\001\002\000\052\003\uff95\006\uff95" +
    "\007\uff95\010\uff95\011\uff95\012\uff95\013\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95" +
    "\025\uff95\030\uff95\031\uff95\036\uff95\067\uff95\001\002\000" +
    "\052\003\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92" +
    "\013\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022" +
    "\uff92\023\uff92\024\uff92\025\uff92\030\uff92\031\uff92\036\uff92" +
    "\067\uff92\001\002\000\004\072\240\001\002\000\052\003" +
    "\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b" +
    "\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023" +
    "\uff8b\024\uff8b\025\uff8b\030\uff8b\031\uff8b\036\uff8b\067\uff8b" +
    "\001\002\000\004\064\064\001\002\000\040\006\006\007" +
    "\005\010\004\011\013\012\010\026\062\027\040\032\042" +
    "\033\044\034\055\035\056\036\043\044\045\063\060\064" +
    "\064\001\002\000\042\043\101\044\067\045\076\046\077" +
    "\047\070\050\072\052\075\053\100\054\066\055\074\057" +
    "\103\060\102\061\104\062\071\065\134\073\073\001\002" +
    "\000\004\072\245\001\002\000\052\003\uffa1\006\uffa1\007" +
    "\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\015\uffa1\016\uffa1" +
    "\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025" +
    "\uffa1\030\uffa1\031\uffa1\036\uffa1\067\uffa1\001\002\000\004" +
    "\042\255\001\002\000\004\041\253\001\002\000\004\056" +
    "\251\001\002\000\040\006\006\007\005\010\004\011\013" +
    "\012\010\026\062\027\040\032\042\033\044\034\055\035" +
    "\056\036\043\044\045\063\060\064\064\001\002\000\046" +
    "\043\101\044\067\045\076\046\077\047\070\050\072\052" +
    "\075\053\100\054\066\055\074\057\103\060\102\061\104" +
    "\062\071\065\uffaf\070\uffaf\072\uffaf\073\073\001\002\000" +
    "\040\006\006\007\005\010\004\011\013\012\010\026\062" +
    "\027\040\032\042\033\044\034\055\035\056\036\043\044" +
    "\045\063\060\064\064\001\002\000\046\043\101\044\067" +
    "\045\076\046\077\047\070\050\072\052\075\053\100\054" +
    "\066\055\074\057\103\060\102\061\104\062\071\065\uffab" +
    "\070\uffab\072\uffab\073\073\001\002\000\040\006\006\007" +
    "\005\010\004\011\013\012\010\026\062\027\040\032\042" +
    "\033\044\034\055\035\056\036\043\044\045\063\060\064" +
    "\064\001\002\000\046\043\101\044\067\045\076\046\077" +
    "\047\070\050\072\052\075\053\100\054\066\055\074\057" +
    "\103\060\102\061\104\062\071\065\uffa9\070\uffa9\072\uffa9" +
    "\073\073\001\002\000\004\066\155\001\002\000\004\016" +
    "\261\001\002\000\004\064\uffb2\001\002\000\004\064\064" +
    "\001\002\000\040\006\006\007\005\010\004\011\013\012" +
    "\010\026\062\027\040\032\042\033\044\034\055\035\056" +
    "\036\043\044\045\063\060\064\064\001\002\000\042\043" +
    "\101\044\067\045\076\046\077\047\070\050\072\052\075" +
    "\053\100\054\066\055\074\057\103\060\102\061\104\062" +
    "\071\065\134\073\073\001\002\000\004\072\266\001\002" +
    "\000\052\003\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\030\uffb1\031\uffb1\036" +
    "\uffb1\067\uffb1\001\002\000\042\006\006\007\005\010\004" +
    "\011\013\012\010\026\062\027\040\032\042\033\044\034" +
    "\055\035\056\036\043\044\045\063\060\064\064\065\134" +
    "\001\002\000\004\072\274\001\002\000\042\043\101\044" +
    "\067\045\076\046\077\047\070\050\072\052\075\053\100" +
    "\054\066\055\074\057\103\060\102\061\104\062\071\065" +
    "\134\073\073\001\002\000\004\072\273\001\002\000\052" +
    "\003\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\025\uffa4\030\uffa4\031\uffa4\036\uffa4\067" +
    "\uffa4\001\002\000\052\003\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\015\uffa3\016\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\030\uffa3" +
    "\031\uffa3\036\uffa3\067\uffa3\001\002\000\004\064\064\001" +
    "\002\000\040\006\006\007\005\010\004\011\013\012\010" +
    "\026\062\027\040\032\042\033\044\034\055\035\056\036" +
    "\043\044\045\063\060\064\064\001\002\000\042\043\101" +
    "\044\067\045\076\046\077\047\070\050\072\052\075\053" +
    "\100\054\066\055\074\057\103\060\102\061\104\062\071" +
    "\065\134\073\073\001\002\000\004\066\155\001\002\000" +
    "\052\003\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4" +
    "\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\030\uffb4\031\uffb4\036\uffb4" +
    "\067\uffb4\001\002\000\004\064\064\001\002\000\020\006" +
    "\006\007\005\010\004\011\013\012\010\036\311\072\304" +
    "\001\002\000\042\006\006\007\005\010\004\011\013\012" +
    "\010\026\062\027\040\032\042\033\044\034\055\035\056" +
    "\036\043\044\045\063\060\064\064\072\336\001\002\000" +
    "\004\036\311\001\002\000\004\065\134\001\002\000\004" +
    "\072\315\001\002\000\006\070\313\072\uffbd\001\002\000" +
    "\004\056\uffb0\001\002\000\006\070\uffbb\072\uffbb\001\002" +
    "\000\004\036\311\001\002\000\006\070\uffbc\072\uffbc\001" +
    "\002\000\042\006\006\007\005\010\004\011\013\012\010" +
    "\026\062\027\040\032\042\033\044\034\055\035\056\036" +
    "\043\044\045\063\060\064\064\072\317\001\002\000\042" +
    "\043\101\044\067\045\076\046\077\047\070\050\072\052" +
    "\075\053\100\054\066\055\074\057\103\060\102\061\104" +
    "\062\071\072\330\073\073\001\002\000\006\036\323\065" +
    "\uffc2\001\002\000\006\065\uffb9\070\uffb9\001\002\000\006" +
    "\065\uffb8\070\uffb8\001\002\000\006\065\uffc4\070\326\001" +
    "\002\000\014\037\146\040\147\041\uffac\042\uffaa\056\uffb0" +
    "\001\002\000\006\065\uffb6\070\uffb6\001\002\000\006\065" +
    "\uffb7\070\uffb7\001\002\000\004\036\323\001\002\000\006" +
    "\065\uffba\070\uffba\001\002\000\006\036\323\065\uffc5\001" +
    "\002\000\006\065\uffc6\070\326\001\002\000\004\066\155" +
    "\001\002\000\052\003\uffc7\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\030\uffc7\031" +
    "\uffc7\036\uffc7\067\uffc7\001\002\000\006\070\313\072\uffbe" +
    "\001\002\000\042\043\101\044\067\045\076\046\077\047" +
    "\070\050\072\052\075\053\100\054\066\055\074\057\103" +
    "\060\102\061\104\062\071\072\340\073\073\001\002\000" +
    "\006\036\323\065\uffbf\001\002\000\006\065\uffc0\070\326" +
    "\001\002\000\006\036\323\065\uffc1\001\002\000\006\065" +
    "\uffc3\070\326\001\002\000\004\072\343\001\002\000\052" +
    "\003\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012\uff89\013" +
    "\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89" +
    "\023\uff89\024\uff89\025\uff89\030\uff89\031\uff89\036\uff89\067" +
    "\uff89\001\002\000\052\003\uff9d\006\uff9d\007\uff9d\010\uff9d" +
    "\011\uff9d\012\uff9d\013\uff9d\015\uff9d\016\uff9d\017\uff9d\020" +
    "\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\030\uff9d" +
    "\031\uff9d\036\uff9d\067\uff9d\001\002\000\062\002\uff9f\003" +
    "\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f" +
    "\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\030\uff9f" +
    "\031\uff9f\036\uff9f\067\uff9f\001\002\000\004\064\064\001" +
    "\002\000\040\006\006\007\005\010\004\011\013\012\010" +
    "\026\062\027\040\032\042\033\044\034\055\035\056\036" +
    "\043\044\045\063\060\064\064\001\002\000\042\043\101" +
    "\044\067\045\076\046\077\047\070\050\072\052\075\053" +
    "\100\054\066\055\074\057\103\060\102\061\104\062\071" +
    "\065\134\073\073\001\002\000\004\066\155\001\002\000" +
    "\010\021\364\022\354\067\161\001\002\000\052\003\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\030\uffdc\031\uffdc\036\uffdc\067\uffdc\001" +
    "\002\000\004\071\uffc9\001\002\000\040\006\006\007\005" +
    "\010\004\011\013\012\010\026\062\027\040\032\042\033" +
    "\044\034\055\035\056\036\043\044\045\063\060\064\064" +
    "\001\002\000\004\067\uffd7\001\002\000\010\021\364\022" +
    "\354\067\uffd8\001\002\000\004\071\366\001\002\000\052" +
    "\003\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\030\uffda\031\uffda\036\uffda\067" +
    "\uffda\001\002\000\004\067\161\001\002\000\010\021\uffd5" +
    "\022\uffd5\067\uffd5\001\002\000\040\006\uffcf\007\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\026\uffcf\027\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\044\uffcf\063\uffcf\064\uffcf\001" +
    "\002\000\052\003\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\013\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\030\uffdb\031\uffdb" +
    "\036\uffdb\067\uffdb\001\002\000\050\003\uffce\006\uffce\007" +
    "\uffce\010\uffce\011\uffce\012\uffce\013\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\023\uffce\024\uffce\025\uffce\030\uffce\031" +
    "\uffce\036\uffce\066\uffcc\067\uffca\001\002\000\004\066\155" +
    "\001\002\000\044\003\201\006\006\007\005\010\004\011" +
    "\013\012\010\013\212\015\167\016\170\017\175\020\160" +
    "\023\163\024\200\025\211\030\166\031\177\036\176\001" +
    "\002\000\046\003\201\006\006\007\005\010\004\011\013" +
    "\012\010\013\212\015\167\016\170\017\175\020\160\023" +
    "\163\024\200\025\211\030\166\031\177\036\176\067\uffcd" +
    "\001\002\000\004\067\uffcb\001\002\000\004\067\uffd9\001" +
    "\002\000\010\021\uffd6\022\uffd6\067\uffd6\001\002\000\042" +
    "\043\101\044\067\045\076\046\077\047\070\050\072\052" +
    "\075\053\100\054\066\055\074\057\103\060\102\061\104" +
    "\062\071\071\376\073\073\001\002\000\054\003\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\020\uffd4\021\uffd0\022\uffd0\023\uffd4\024" +
    "\uffd4\025\uffd4\030\uffd4\031\uffd4\036\uffd4\066\uffd2\067\uffd0" +
    "\001\002\000\004\066\155\001\002\000\044\003\201\006" +
    "\006\007\005\010\004\011\013\012\010\013\212\015\167" +
    "\016\170\017\175\020\160\023\163\024\200\025\211\030" +
    "\166\031\177\036\176\001\002\000\052\003\201\006\006" +
    "\007\005\010\004\011\013\012\010\013\212\015\167\016" +
    "\170\017\175\020\160\021\uffd3\022\uffd3\023\163\024\200" +
    "\025\211\030\166\031\177\036\176\067\uffd3\001\002\000" +
    "\010\021\uffd1\022\uffd1\067\uffd1\001\002\000\004\066\155" +
    "\001\002\000\014\006\006\007\005\010\004\011\013\012" +
    "\010\001\002\000\004\036\u0106\001\002\000\006\065\uffe5" +
    "\070\uffe5\001\002\000\024\002\uffeb\003\uffeb\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\001\002" +
    "\000\006\065\uffe4\070\uffe4\001\002\000\004\064\064\001" +
    "\002\000\004\064\uffe7\001\002\000\016\006\006\007\005" +
    "\010\004\011\013\012\010\065\134\001\002\000\006\065" +
    "\134\070\u0104\001\002\000\004\066\155\001\002\000\024" +
    "\002\uffe8\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\001\002\000\004\066\155\001\002" +
    "\000\024\002\uffea\003\uffea\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\012\uffea\001\002\000\004\036\u0113" +
    "\001\002\000\004\072\u0114\001\002\000\004\064\ufff4\001" +
    "\002\000\024\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\022\002\022\003\021\004\010\005\017\021" +
    "\014\022\016\025\006\054\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\u0110\001\001" +
    "\000\002\001\001\000\004\052\u0108\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\030\024\025\052\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\024\005\017\021\014\022\016\025\006\054\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\035\001\001\000\004\061\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\033\001\001\000\002\001\001\000\004\066\035\001\001" +
    "\000\002\001\001\000\030\006\060\011\047\012\053\013" +
    "\051\014\062\015\052\017\040\020\046\022\050\053\056" +
    "\061\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\060\011\144\012\053\013\051\014\062\015\052\017" +
    "\040\020\046\022\050\053\056\061\045\001\001\000\030" +
    "\006\060\011\142\012\053\013\051\014\062\015\052\017" +
    "\040\020\046\022\050\053\056\061\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\127\001\001\000" +
    "\030\006\060\011\064\012\053\013\051\014\062\015\052" +
    "\017\040\020\046\022\050\053\056\061\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\006\060\011\126\012" +
    "\053\013\051\014\062\015\052\017\040\020\046\022\050" +
    "\053\056\061\045\001\001\000\030\006\060\011\125\012" +
    "\053\013\051\014\062\015\052\017\040\020\046\022\050" +
    "\053\056\061\045\001\001\000\030\006\060\011\124\012" +
    "\053\013\051\014\062\015\052\017\040\020\046\022\050" +
    "\053\056\061\045\001\001\000\030\006\060\011\123\012" +
    "\053\013\051\014\062\015\052\017\040\020\046\022\050" +
    "\053\056\061\045\001\001\000\030\006\060\011\122\012" +
    "\053\013\051\014\062\015\052\017\040\020\046\022\050" +
    "\053\056\061\045\001\001\000\004\105\115\001\001\000" +
    "\030\006\060\011\114\012\053\013\051\014\062\015\052" +
    "\017\040\020\046\022\050\053\056\061\045\001\001\000" +
    "\030\006\060\011\113\012\053\013\051\014\062\015\052" +
    "\017\040\020\046\022\050\053\056\061\045\001\001\000" +
    "\030\006\060\011\112\012\053\013\051\014\062\015\052" +
    "\017\040\020\046\022\050\053\056\061\045\001\001\000" +
    "\030\006\060\011\111\012\053\013\051\014\062\015\052" +
    "\017\040\020\046\022\050\053\056\061\045\001\001\000" +
    "\030\006\060\011\110\012\053\013\051\014\062\015\052" +
    "\017\040\020\046\022\050\053\056\061\045\001\001\000" +
    "\030\006\060\011\107\012\053\013\051\014\062\015\052" +
    "\017\040\020\046\022\050\053\056\061\045\001\001\000" +
    "\030\006\060\011\106\012\053\013\051\014\062\015\052" +
    "\017\040\020\046\022\050\053\056\061\045\001\001\000" +
    "\030\006\060\011\105\012\053\013\051\014\062\015\052" +
    "\017\040\020\046\022\050\053\056\061\045\001\001\000" +
    "\030\006\060\011\104\012\053\013\051\014\062\015\052" +
    "\017\040\020\046\022\050\053\056\061\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\006\060" +
    "\011\116\012\053\013\051\014\062\015\052\017\040\020" +
    "\046\022\050\053\056\061\045\001\001\000\002\001\001" +
    "\000\004\106\120\001\001\000\030\006\060\011\121\012" +
    "\053\013\051\014\062\015\052\017\040\020\046\022\050" +
    "\053\056\061\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\060\007\130\011\132\012" +
    "\053\013\051\014\062\015\052\017\040\020\046\022\050" +
    "\053\056\061\045\062\131\001\001\000\004\062\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\060\011\136\012\053\013" +
    "\051\014\062\015\052\017\040\020\046\022\050\053\056" +
    "\061\045\001\001\000\002\001\001\000\030\006\060\011" +
    "\140\012\053\013\051\014\062\015\052\017\040\020\046" +
    "\022\050\053\056\061\045\001\001\000\004\062\141\001" +
    "\001\000\002\001\001\000\004\062\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\151\022\150\062\152\001\001\000\002" +
    "\001\001\000\004\062\u0102\001\001\000\006\026\153\063" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\006\201\015\203\016\204\021\171\022\170\027\161\030" +
    "\163\031\213\032\207\033\156\041\205\042\164\043\172" +
    "\051\202\053\056\055\212\060\173\064\206\001\001\000" +
    "\002\001\001\000\004\071\345\001\001\000\002\001\001" +
    "\000\044\006\201\015\203\016\204\021\171\022\170\030" +
    "\343\031\213\032\207\033\156\041\205\042\164\043\172" +
    "\051\202\053\056\055\212\060\173\064\344\001\001\000" +
    "\004\113\341\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\076\301\001\001\000\004\077" +
    "\274\001\001\000\006\023\030\024\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\266\001\001\000" +
    "\004\100\256\001\001\000\010\102\247\103\246\104\245" +
    "\001\001\000\004\107\240\001\001\000\004\112\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\110\226\111\225" +
    "\001\001\000\002\001\001\000\004\061\214\001\001\000" +
    "\002\001\001\000\030\006\060\011\215\012\053\013\051" +
    "\014\062\015\052\017\040\020\046\022\050\053\056\061" +
    "\045\001\001\000\004\062\216\001\001\000\006\026\217" +
    "\063\155\001\001\000\002\001\001\000\006\067\222\070" +
    "\221\001\001\000\006\026\224\063\155\001\001\000\006" +
    "\032\223\055\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\060\011\227\012\053" +
    "\013\051\014\062\015\052\017\040\020\046\022\050\053" +
    "\056\061\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\241\001\001\000\030\006\060\011" +
    "\242\012\053\013\051\014\062\015\052\017\040\020\046" +
    "\022\050\053\056\061\045\001\001\000\004\062\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\060\011" +
    "\251\012\053\013\051\014\062\015\052\017\040\020\046" +
    "\022\050\053\056\061\045\001\001\000\002\001\001\000" +
    "\030\006\060\011\253\012\053\013\051\014\062\015\052" +
    "\017\040\020\046\022\050\053\056\061\045\001\001\000" +
    "\002\001\001\000\030\006\060\011\255\012\053\013\051" +
    "\014\062\015\052\017\040\020\046\022\050\053\056\061" +
    "\045\001\001\000\002\001\001\000\006\026\257\063\155" +
    "\001\001\000\002\001\001\000\004\101\261\001\001\000" +
    "\004\061\262\001\001\000\030\006\060\011\263\012\053" +
    "\013\051\014\062\015\052\017\040\020\046\022\050\053" +
    "\056\061\045\001\001\000\004\062\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\006\060\011\270\012" +
    "\053\013\051\014\062\015\052\017\040\020\046\022\050" +
    "\053\056\061\045\062\267\001\001\000\002\001\001\000" +
    "\004\062\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\275\001\001\000\030\006" +
    "\060\011\276\012\053\013\051\014\062\015\052\017\040" +
    "\020\046\022\050\053\056\061\045\001\001\000\004\062" +
    "\277\001\001\000\006\026\300\063\155\001\001\000\002" +
    "\001\001\000\004\061\302\001\001\000\014\022\304\044" +
    "\305\045\306\050\307\051\311\001\001\000\030\006\060" +
    "\011\334\012\053\013\051\014\062\015\052\017\040\020" +
    "\046\022\050\053\056\061\045\001\001\000\006\050\333" +
    "\051\311\001\001\000\004\062\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\102\247\001\001\000\002" +
    "\001\001\000\004\051\313\001\001\000\002\001\001\000" +
    "\030\006\060\011\315\012\053\013\051\014\062\015\052" +
    "\017\040\020\046\022\050\053\056\061\045\001\001\000" +
    "\002\001\001\000\014\015\320\016\323\046\321\047\317" +
    "\051\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\102\247\103\246\104\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\320\016" +
    "\323\047\326\051\324\001\001\000\002\001\001\000\014" +
    "\015\320\016\323\046\330\047\317\051\324\001\001\000" +
    "\002\001\001\000\006\026\332\063\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\015" +
    "\320\016\323\046\336\047\317\051\324\001\001\000\002" +
    "\001\001\000\014\015\320\016\323\046\340\047\317\051" +
    "\324\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\346\001\001\000\030\006\060\011\347\012\053\013\051" +
    "\014\062\015\052\017\040\020\046\022\050\053\056\061" +
    "\045\001\001\000\004\062\350\001\001\000\006\034\352" +
    "\063\351\001\001\000\020\035\361\036\356\037\355\040" +
    "\362\056\354\057\357\064\360\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\060\011\374\012\053\013" +
    "\051\014\062\015\052\017\040\020\046\022\050\053\056" +
    "\061\045\001\001\000\002\001\001\000\012\037\372\040" +
    "\373\056\354\057\357\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\364\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\074\367\075\366" +
    "\001\001\000\006\026\371\063\155\001\001\000\044\006" +
    "\201\015\203\016\204\021\171\022\170\027\370\030\163" +
    "\031\213\032\207\033\156\041\205\042\164\043\172\051" +
    "\202\053\056\055\212\060\173\001\001\000\042\006\201" +
    "\015\203\016\204\021\171\022\170\030\343\031\213\032" +
    "\207\033\156\041\205\042\164\043\172\051\202\053\056" +
    "\055\212\060\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\072\377" +
    "\073\376\001\001\000\006\026\u0101\063\155\001\001\000" +
    "\044\006\201\015\203\016\204\021\171\022\170\027\u0100" +
    "\030\163\031\213\032\207\033\156\041\205\042\164\043" +
    "\172\051\202\053\056\055\212\060\173\001\001\000\042" +
    "\006\201\015\203\016\204\021\171\022\170\030\343\031" +
    "\213\032\207\033\156\041\205\042\164\043\172\051\202" +
    "\053\056\055\212\060\173\001\001\000\002\001\001\000" +
    "\006\026\u0106\063\155\001\001\000\004\022\u0104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\u010a\001\001\000\002\001\001" +
    "\000\010\010\u010b\022\150\062\u010c\001\001\000\004\062" +
    "\u010e\001\001\000\006\026\u010d\063\155\001\001\000\002" +
    "\001\001\000\006\026\u010f\063\155\001\001\000\002\001" +
    "\001\000\006\006\u0111\053\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserF$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserF$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserF$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ScannerF s;
    int nIB = 0;
    WordPainter painter;
    @SuppressWarnings("deprecation")
    public ParserF(ScannerF s, WordPainter painter) {
        super(s);
        this.s = s;
        this.painter = painter;
    }
    public void syntax_error(Symbol sym) {
        painter.SERROR(sym.left, sym.right);
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserF$actions {
  private final ParserF parser;

  /** Constructor */
  CUP$ParserF$actions(ParserF parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action_part00000000(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserF$result;

      /* select the action based on the action number */
      switch (CUP$ParserF$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		RESULT = start_val;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserF$parser.done_parsing();
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= INSTSGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTSGLOBAL ::= INSTSGLOBAL INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTSGLOBAL ::= INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTGLOBAL ::= CALLMAINFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTGLOBAL ::= DECLID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTGLOBAL ::= DECLFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTGLOBAL ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              String RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String mn = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW4(mnleft, mnright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CALLMAINFUNC ::= RW_main NT$0 CALLFUNC TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String mn = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLMAINFUNC",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CALLFUNC ::= IDCOLORUSEFNC COLORLPAR LISTARGS COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLFUNC",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CALLFUNC ::= IDCOLORUSEFNC COLORLPAR COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLFUNC",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IDCOLORUSEFNC ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEFNC(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IDCOLORUSEFNC",41, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTARGS ::= LISTARGS TK_comma EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTARGS",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTARGS ::= EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTARGS",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLID ::= TYPE INITIDS TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLID",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INITIDS ::= INITIDS TK_comma INITID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIDS",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INITIDS ::= INITID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIDS",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$1 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$1",52, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INITID ::= TK_id NT$1 TK_equ EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITID",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INITID ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITID",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLFUNC ::= TYPE IDCOLORFNC COLORLPAR LISTPARAMS COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLFUNC ::= VOIDCOLOR IDCOLORFNC COLORLPAR LISTPARAMS COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLFUNC ::= TYPE IDCOLORFNC COLORLPAR COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLFUNC ::= VOIDCOLOR IDCOLORFNC COLORLPAR COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IDCOLORFNC ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IDCOLORFNC",40, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VOIDCOLOR ::= RW_void 
            {
              String RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(vdleft, vdright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("VOIDCOLOR",42, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTPARAMS ::= LISTPARAMS TK_comma TYPE TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTPARAMS ::= TYPE TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$2 ::= 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(elleft, elright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$2",53, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IFSTRUCT ::= IFCOLOR COLORLPAR EXP COLORRPAR ENV RW_else NT$2 IFSTRUCT 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-7)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$3 ::= 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(elleft, elright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$3",54, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IFSTRUCT ::= IFCOLOR COLORLPAR EXP COLORRPAR ENV RW_else NT$3 ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-7)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IFSTRUCT ::= IFCOLOR COLORLPAR EXP COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IFCOLOR ::= RW_if 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(ileft, iright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFCOLOR",43, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$4 ::= 
            {
              String RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(swleft, swright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$4",55, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SWITCHSTRUCT ::= RW_switch NT$4 COLORLPAR EXP COLORRPAR ENVS 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SWITCHSTRUCT",25, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ENVS ::= COLORLBRC CASESDEFAULT COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVS",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ENVS ::= COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVS",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CASESDEFAULT ::= CASES DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CASESDEFAULT ::= CASES 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASESDEFAULT ::= DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$5 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$5",56, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASE ::= CASECOLOR EXP TK_colon NT$5 INSTRUCTIONS 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",30, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$6 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$6",57, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CASE ::= CASECOLOR EXP TK_colon NT$6 ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",30, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CASE ::= CASECOLOR EXP TK_colon 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",30, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CASECOLOR ::= RW_case 
            {
              String RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(csleft, csright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASECOLOR",44, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$7 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$7",58, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DEFAULT ::= DEFAULTCOLOR TK_colon NT$7 INSTRUCTIONS 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$8 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$8",59, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DEFAULT ::= DEFAULTCOLOR TK_colon NT$8 ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DEFAULT ::= DEFAULTCOLOR TK_colon 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DEFAULTCOLOR ::= RW_default 
            {
              String RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String df = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(dfleft, dfright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULTCOLOR",45, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$9 ::= 
            {
              String RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(frleft, frright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$9",60, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LOOPFOR ::= RW_for NT$9 COLORLPAR ARGSFOR COLORRPAR ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int frleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPFOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARGSFOR ::= INITIALIZE TK_semicolon EXP TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARGSFOR ::= INITIALIZE TK_semicolon EXP TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARGSFOR ::= INITIALIZE TK_semicolon TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARGSFOR ::= TK_semicolon EXP TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARGSFOR ::= INITIALIZE TK_semicolon TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARGSFOR ::= TK_semicolon EXP TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARGSFOR ::= TK_semicolon TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARGSFOR ::= TK_semicolon TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INITIALIZE ::= TYPE REASIGNS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIALIZE",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INITIALIZE ::= REASIGNS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIALIZE",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // REASIGNS ::= REASIGNS TK_comma REASIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("REASIGNS",38, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // REASIGNS ::= REASIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("REASIGNS",38, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // UPDATESFOR ::= UPDATESFOR TK_comma UPDATEFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATESFOR",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // UPDATESFOR ::= UPDATEFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATESFOR",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // UPDATEFOR ::= INCDEC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // UPDATEFOR ::= REASIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // UPDATEFOR ::= ADDSUB 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$10 ::= 
            {
              String RESULT =null;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(whlleft, whlright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$10",61, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LOOPWHILE ::= RW_while NT$10 COLORLPAR EXP COLORRPAR ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPWHILE",31, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$11 ::= 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(dleft, dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$11",62, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$12 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(whlleft, whlright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$12",63, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LOOPDOWHILE ::= RW_do NT$11 ENV RW_while NT$12 COLORLPAR EXP COLORRPAR TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPDOWHILE",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$13 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$13",64, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // REASIGN ::= TK_id NT$13 TK_equ EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("REASIGN",39, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INCDEC ::= TK_id TK_inc 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INCDEC",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INCDEC ::= TK_id TK_dec 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INCDEC",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$14 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$14",65, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ADDSUB ::= TK_id NT$14 TK_add EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ADDSUB",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$15 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$15",66, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ADDSUB ::= TK_id NT$15 TK_sub EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ADDSUB",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$16 ::= 
            {
              String RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(qleft, qright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$16",67, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$17 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$17",68, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TERNARY ::= EXP TK_question NT$16 EXP TK_colon NT$17 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TERNARY",13, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CAST ::= TYPE COLORLPAR EXP COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CAST",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PRINT ::= PRINTCOLOR COLORLPAR EXP COLORRPAR TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PRINT ::= PRINTCOLOR COLORLPAR COLORRPAR TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$18 ::= 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.USEFNC(pleft, pright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$18",69, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PRINT ::= RW_print NT$18 COLORLPAR EXP COLORRPAR TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PRINTCOLOR ::= RW_println 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEFNC(pleft, pright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINTCOLOR",46, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ENV ::= COLORLBRC INSTRUCTIONS COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENV",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ENV ::= COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENV",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INSTRUCTIONS ::= INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INSTRUCTION ::= DECLID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INSTRUCTION ::= IFSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INSTRUCTION ::= SWITCHSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INSTRUCTION ::= LOOPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INSTRUCTION ::= LOOPWHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INSTRUCTION ::= LOOPDOWHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INSTRUCTION ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INSTRUCTION ::= ADDSUB TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INSTRUCTION ::= INCDEC TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // INSTRUCTION ::= CALLFUNC TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INSTRUCTION ::= PRINT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$19 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$19",70, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INSTRUCTION ::= RW_return NT$19 EXP TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$20 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$20",71, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // INSTRUCTION ::= RW_return NT$20 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$21 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$21",72, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // INSTRUCTION ::= RW_continue NT$21 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$22 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$22",73, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // INSTRUCTION ::= RW_break NT$22 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INSTRUCTION ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TYPE ::= RW_String 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW5(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TYPE ::= RW_int 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TYPE ::= RW_boolean 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TYPE ::= RW_char 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // TYPE ::= RW_double 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXP ::= ARITHMETICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXP ::= RELATIONALS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXP ::= LOGICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXP ::= INCDEC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXP ::= CALLFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXP ::= TERNARY 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXP ::= CAST 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXP ::= TK_id 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEVARIABLE(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXP ::= TK_string 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.STRING(trleft, trright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXP ::= TK_char 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.CHAR(trleft, trright);       
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXP ::= TK_int 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXP ::= TK_double 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXP ::= RW_true 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);        
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXP ::= RW_false 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);        
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXP ::= COLORLPAR EXP COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ARITHMETICS ::= EXP TK_div EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ARITHMETICS ::= EXP TK_pow EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ARITHMETICS ::= EXP TK_mod EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ARITHMETICS ::= TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // RELATIONALS ::= EXP TK_equequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // RELATIONALS ::= EXP TK_notequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // RELATIONALS ::= EXP TK_lessequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // RELATIONALS ::= EXP TK_moreequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // RELATIONALS ::= EXP TK_less EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // RELATIONALS ::= EXP TK_more EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // LOGICS ::= EXP TK_and EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // LOGICS ::= EXP TK_or EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // LOGICS ::= TK_not EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // COLORLBRC ::= TK_lbrc 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORLBRC",49, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // COLORRBRC ::= TK_rbrc 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORRBRC",50, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // COLORLPAR ::= TK_lpar 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORLPAR",47, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // COLORRPAR ::= TK_rpar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORRPAR",48, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserF$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
              return CUP$ParserF$do_action_part00000000(
                               CUP$ParserF$act_num,
                               CUP$ParserF$parser,
                               CUP$ParserF$stack,
                               CUP$ParserF$top);
    }
}

}
