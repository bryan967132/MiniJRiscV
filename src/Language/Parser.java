
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java.util.ArrayList;
import java.util.Arrays;
import java_cup.runtime.*;
import Classes.Abstracts.*;
import Classes.Expressions.*;
import Classes.Instructions.*;
import Classes.Utils.IDValue;
import Classes.Utils.InitializeFor;
import Classes.Utils.Parameter;
import Classes.Utils.Type;
import Classes.Utils.Error;
import Classes.Utils.TypeError;
import Classes.Utils.Outs;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\004\000\002\003\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\017\005\000\002\023\005\000\002\025\005\000\002" +
    "\025\003\000\002\027\005\000\002\027\003\000\002\024" +
    "\010\000\002\024\010\000\002\024\007\000\002\024\007" +
    "\000\002\006\006\000\002\006\004\000\002\032\011\000" +
    "\002\032\011\000\002\032\007\000\002\033\007\000\002" +
    "\034\005\000\002\034\004\000\002\035\004\000\002\035" +
    "\003\000\002\035\003\000\002\037\004\000\002\037\003" +
    "\000\002\040\006\000\002\040\006\000\002\040\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\004\000\002" +
    "\047\007\000\002\036\007\000\002\036\006\000\002\036" +
    "\006\000\002\036\006\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\004\000\002\044\004\000" +
    "\002\044\003\000\002\026\005\000\002\026\003\000\002" +
    "\030\005\000\002\042\005\000\002\042\003\000\002\041" +
    "\005\000\002\041\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\045\007\000\002\046\011\000" +
    "\002\043\005\000\002\022\005\000\002\022\005\000\002" +
    "\021\007\000\002\021\006\000\002\021\007\000\002\052" +
    "\005\000\002\052\004\000\002\004\004\000\002\004\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\003\000\002\031\005\000\002\031\004" +
    "\000\002\031\004\000\002\031\004\000\002\031\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\004\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\004" +
    "\000\002\013\004\000\002\013\004\000\002\014\006\000" +
    "\002\014\005\000\002\005\005\000\002\005\003\000\002" +
    "\015\007\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\024\002\uffff\003\017\004\012\005\014\006" +
    "\006\007\005\010\004\011\013\012\010\001\002\000\006" +
    "\036\uffa7\064\uffa7\001\002\000\006\036\uffa8\064\uffa8\001" +
    "\002\000\006\036\uffaa\064\uffaa\001\002\000\024\002\ufffa" +
    "\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\001\002\000\006\036\uffa6\064\uffa6\001\002" +
    "\000\024\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\001\002\000\004\036\366" +
    "\001\002\000\006\036\uffa9\064\uffa9\001\002\000\004\036" +
    "\356\001\002\000\004\036\026\001\002\000\024\002\ufffc" +
    "\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\001\002\000\024\002\ufff9\003\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\001" +
    "\002\000\024\002\000\003\017\004\012\005\014\006\006" +
    "\007\005\010\004\011\013\012\010\001\002\000\024\002" +
    "\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\001\002\000\004\002\023\001\002\000" +
    "\004\002\001\001\002\000\024\002\ufffe\003\ufffe\004\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\001" +
    "\002\000\006\070\ufff5\072\ufff5\001\002\000\012\056\034" +
    "\064\140\070\ufff3\072\ufff3\001\002\000\006\070\031\072" +
    "\030\001\002\000\060\002\ufff7\003\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\030\ufff7\031\ufff7\036\ufff7\067\ufff7\001" +
    "\002\000\004\036\033\001\002\000\006\070\ufff6\072\ufff6" +
    "\001\002\000\010\056\034\070\ufff3\072\ufff3\001\002\000" +
    "\040\006\006\007\005\010\004\011\013\012\010\026\054" +
    "\027\036\032\037\033\041\034\051\035\052\036\040\044" +
    "\042\063\053\064\056\001\002\000\050\043\uffa0\044\uffa0" +
    "\045\uffa0\046\uffa0\047\uffa0\050\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\065\uffa0" +
    "\070\uffa0\071\uffa0\072\uffa0\073\uffa0\001\002\000\050\043" +
    "\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98\052\uff98" +
    "\053\uff98\054\uff98\055\uff98\057\uff98\060\uff98\061\uff98\062" +
    "\uff98\065\uff98\070\uff98\071\uff98\072\uff98\073\uff98\001\002" +
    "\000\050\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050" +
    "\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\057\uff9c\060\uff9c" +
    "\061\uff9c\062\uff9c\065\uff9c\070\uff9c\071\uff9c\072\uff9c\073" +
    "\uff9c\001\002\000\056\037\127\040\130\043\uff9e\044\uff9e" +
    "\045\uff9e\046\uff9e\047\uff9e\050\uff9e\052\uff9e\053\uff9e\054" +
    "\uff9e\055\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\064\131" +
    "\065\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\001\002\000" +
    "\050\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\055\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\065\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d" +
    "\001\002\000\040\006\006\007\005\010\004\011\013\012" +
    "\010\026\054\027\036\032\037\033\041\034\051\035\052" +
    "\036\040\044\042\063\053\064\056\001\002\000\050\043" +
    "\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\052\uff9f" +
    "\053\uff9f\054\uff9f\055\uff9f\057\uff9f\060\uff9f\061\uff9f\062" +
    "\uff9f\065\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\001\002" +
    "\000\044\043\075\044\062\045\073\046\072\047\063\050" +
    "\066\052\071\053\074\054\061\055\070\057\077\060\076" +
    "\061\100\062\065\070\ufff4\072\ufff4\073\067\001\002\000" +
    "\004\064\123\001\002\000\050\043\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\052\uffa4\053\uffa4\054\uffa4\055" +
    "\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\065\uffa4\070\uffa4" +
    "\071\uffa4\072\uffa4\073\uffa4\001\002\000\050\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\052\uffa2\053\uffa2" +
    "\054\uffa2\055\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\065" +
    "\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\001\002\000\050" +
    "\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\052" +
    "\uffa5\053\uffa5\054\uffa5\055\uffa5\057\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\065\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\001" +
    "\002\000\050\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b" +
    "\050\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\057\uff9b\060" +
    "\uff9b\061\uff9b\062\uff9b\065\uff9b\070\uff9b\071\uff9b\072\uff9b" +
    "\073\uff9b\001\002\000\050\043\uff9a\044\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\050\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a" +
    "\057\uff9a\060\uff9a\061\uff9a\062\uff9a\065\uff9a\070\uff9a\071" +
    "\uff9a\072\uff9a\073\uff9a\001\002\000\040\006\006\007\005" +
    "\010\004\011\013\012\010\026\054\027\036\032\037\033" +
    "\041\034\051\035\052\036\040\044\042\063\053\064\056" +
    "\001\002\000\050\043\uff99\044\uff99\045\uff99\046\uff99\047" +
    "\uff99\050\uff99\052\uff99\053\uff99\054\uff99\055\uff99\057\uff99" +
    "\060\uff99\061\uff99\062\uff99\065\uff99\070\uff99\071\uff99\072" +
    "\uff99\073\uff99\001\002\000\050\043\uffa3\044\uffa3\045\uffa3" +
    "\046\uffa3\047\uffa3\050\uffa3\052\uffa3\053\uffa3\054\uffa3\055" +
    "\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\065\uffa3\070\uffa3" +
    "\071\uffa3\072\uffa3\073\uffa3\001\002\000\040\006\006\007" +
    "\005\010\004\011\013\012\010\026\054\027\036\032\037" +
    "\033\041\034\051\035\052\036\040\044\042\063\053\064" +
    "\056\001\002\000\050\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\047\uffa1\050\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\057" +
    "\uffa1\060\uffa1\061\uffa1\062\uffa1\065\uffa1\070\uffa1\071\uffa1" +
    "\072\uffa1\073\uffa1\001\002\000\042\043\075\044\062\045" +
    "\073\046\072\047\063\050\066\052\071\053\074\054\061" +
    "\055\070\057\077\060\076\061\100\062\065\065\064\073" +
    "\067\001\002\000\040\006\006\007\005\010\004\011\013" +
    "\012\010\026\054\027\036\032\037\033\041\034\051\035" +
    "\052\036\040\044\042\063\053\064\056\001\002\000\040" +
    "\006\006\007\005\010\004\011\013\012\010\026\054\027" +
    "\036\032\037\033\041\034\051\035\052\036\040\044\042" +
    "\063\053\064\056\001\002\000\040\006\006\007\005\010" +
    "\004\011\013\012\010\026\054\027\036\032\037\033\041" +
    "\034\051\035\052\036\040\044\042\063\053\064\056\001" +
    "\002\000\050\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97" +
    "\050\uff97\052\uff97\053\uff97\054\uff97\055\uff97\057\uff97\060" +
    "\uff97\061\uff97\062\uff97\065\uff97\070\uff97\071\uff97\072\uff97" +
    "\073\uff97\001\002\000\040\006\006\007\005\010\004\011" +
    "\013\012\010\026\054\027\036\032\037\033\041\034\051" +
    "\035\052\036\040\044\042\063\053\064\056\001\002\000" +
    "\040\006\006\007\005\010\004\011\013\012\010\026\054" +
    "\027\036\032\037\033\041\034\051\035\052\036\040\044" +
    "\042\063\053\064\056\001\002\000\040\006\006\007\005" +
    "\010\004\011\013\012\010\026\054\027\036\032\037\033" +
    "\041\034\051\035\052\036\040\044\042\063\053\064\056" +
    "\001\002\000\040\006\006\007\005\010\004\011\013\012" +
    "\010\026\054\027\036\032\037\033\041\034\051\035\052" +
    "\036\040\044\042\063\053\064\056\001\002\000\040\006" +
    "\006\007\005\010\004\011\013\012\010\026\054\027\036" +
    "\032\037\033\041\034\051\035\052\036\040\044\042\063" +
    "\053\064\056\001\002\000\040\006\006\007\005\010\004" +
    "\011\013\012\010\026\054\027\036\032\037\033\041\034" +
    "\051\035\052\036\040\044\042\063\053\064\056\001\002" +
    "\000\040\006\006\007\005\010\004\011\013\012\010\026" +
    "\054\027\036\032\037\033\041\034\051\035\052\036\040" +
    "\044\042\063\053\064\056\001\002\000\040\006\006\007" +
    "\005\010\004\011\013\012\010\026\054\027\036\032\037" +
    "\033\041\034\051\035\052\036\040\044\042\063\053\064" +
    "\056\001\002\000\040\006\006\007\005\010\004\011\013" +
    "\012\010\026\054\027\036\032\037\033\041\034\051\035" +
    "\052\036\040\044\042\063\053\064\056\001\002\000\040" +
    "\006\006\007\005\010\004\011\013\012\010\026\054\027" +
    "\036\032\037\033\041\034\051\035\052\036\040\044\042" +
    "\063\053\064\056\001\002\000\040\006\006\007\005\010" +
    "\004\011\013\012\010\026\054\027\036\032\037\033\041" +
    "\034\051\035\052\036\040\044\042\063\053\064\056\001" +
    "\002\000\040\006\006\007\005\010\004\011\013\012\010" +
    "\026\054\027\036\032\037\033\041\034\051\035\052\036" +
    "\040\044\042\063\053\064\056\001\002\000\050\043\075" +
    "\044\062\045\073\046\072\047\063\050\066\052\071\053" +
    "\074\054\061\055\070\057\077\060\076\061\uff89\062\uff89" +
    "\065\uff89\070\uff89\071\uff89\072\uff89\073\uff89\001\002\000" +
    "\050\043\075\044\062\045\073\046\072\047\063\050\066" +
    "\052\uff8b\053\uff8b\054\uff8b\055\uff8b\057\uff8b\060\uff8b\061" +
    "\uff8b\062\uff8b\065\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b" +
    "\001\002\000\050\043\075\044\062\045\073\046\072\047" +
    "\063\050\066\052\uff8a\053\uff8a\054\uff8a\055\uff8a\057\uff8a" +
    "\060\uff8a\061\uff8a\062\uff8a\065\uff8a\070\uff8a\071\uff8a\072" +
    "\uff8a\073\uff8a\001\002\000\050\043\uff96\044\uff96\045\073" +
    "\046\072\047\063\050\066\052\uff96\053\uff96\054\uff96\055" +
    "\uff96\057\uff96\060\uff96\061\uff96\062\uff96\065\uff96\070\uff96" +
    "\071\uff96\072\uff96\073\uff96\001\002\000\050\043\075\044" +
    "\062\045\073\046\072\047\063\050\066\052\uff8e\053\uff8e" +
    "\054\061\055\070\057\077\060\076\061\uff8e\062\uff8e\065" +
    "\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e\001\002\000\050" +
    "\043\uff94\044\uff94\045\uff94\046\uff94\047\063\050\uff94\052" +
    "\uff94\053\uff94\054\uff94\055\uff94\057\uff94\060\uff94\061\uff94" +
    "\062\uff94\065\uff94\070\uff94\071\uff94\072\uff94\073\uff94\001" +
    "\002\000\050\043\uff93\044\uff93\045\uff93\046\uff93\047\063" +
    "\050\uff93\052\uff93\053\uff93\054\uff93\055\uff93\057\uff93\060" +
    "\uff93\061\uff93\062\uff93\065\uff93\070\uff93\071\uff93\072\uff93" +
    "\073\uff93\001\002\000\050\043\075\044\062\045\073\046" +
    "\072\047\063\050\066\052\uff8f\053\uff8f\054\061\055\070" +
    "\057\077\060\076\061\uff8f\062\uff8f\065\uff8f\070\uff8f\071" +
    "\uff8f\072\uff8f\073\uff8f\001\002\000\050\043\075\044\062" +
    "\045\073\046\072\047\063\050\066\052\uff8c\053\uff8c\054" +
    "\uff8c\055\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\065\uff8c" +
    "\070\uff8c\071\uff8c\072\uff8c\073\uff8c\001\002\000\042\043" +
    "\075\044\062\045\073\046\072\047\063\050\066\052\071" +
    "\053\074\054\061\055\070\057\077\060\076\061\100\062" +
    "\065\071\113\073\067\001\002\000\040\006\006\007\005" +
    "\010\004\011\013\012\010\026\054\027\036\032\037\033" +
    "\041\034\051\035\052\036\040\044\042\063\053\064\056" +
    "\001\002\000\050\043\075\044\062\045\073\046\072\047" +
    "\063\050\066\052\071\053\074\054\061\055\070\057\077" +
    "\060\076\061\100\062\065\065\uff80\070\uff80\071\uff80\072" +
    "\uff80\073\uff80\001\002\000\050\043\uff91\044\uff91\045\uff91" +
    "\046\uff91\047\063\050\uff91\052\uff91\053\uff91\054\uff91\055" +
    "\uff91\057\uff91\060\uff91\061\uff91\062\uff91\065\uff91\070\uff91" +
    "\071\uff91\072\uff91\073\uff91\001\002\000\050\043\075\044" +
    "\062\045\073\046\072\047\063\050\066\052\071\053\074" +
    "\054\061\055\070\057\077\060\076\061\100\062\uff88\065" +
    "\uff88\070\uff88\071\uff88\072\uff88\073\uff88\001\002\000\046" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\050\uff92\052\uff92\053" +
    "\uff92\054\uff92\055\uff92\057\uff92\060\uff92\061\uff92\062\uff92" +
    "\065\uff92\070\uff92\071\uff92\072\uff92\073\uff92\001\002\000" +
    "\050\043\uff95\044\uff95\045\073\046\072\047\063\050\066" +
    "\052\uff95\053\uff95\054\uff95\055\uff95\057\uff95\060\uff95\061" +
    "\uff95\062\uff95\065\uff95\070\uff95\071\uff95\072\uff95\073\uff95" +
    "\001\002\000\050\043\075\044\062\045\073\046\072\047" +
    "\063\050\066\052\uff8d\053\uff8d\054\uff8d\055\uff8d\057\uff8d" +
    "\060\uff8d\061\uff8d\062\uff8d\065\uff8d\070\uff8d\071\uff8d\072" +
    "\uff8d\073\uff8d\001\002\000\050\043\075\044\062\045\073" +
    "\046\072\047\063\050\066\052\071\053\074\054\061\055" +
    "\070\057\077\060\076\061\uff87\062\uff87\065\uff87\070\uff87" +
    "\071\uff87\072\uff87\073\uff87\001\002\000\040\006\006\007" +
    "\005\010\004\011\013\012\010\026\054\027\036\032\037" +
    "\033\041\034\051\035\052\036\040\044\042\063\053\064" +
    "\056\001\002\000\042\043\075\044\062\045\073\046\072" +
    "\047\063\050\066\052\071\053\074\054\061\055\070\057" +
    "\077\060\076\061\100\062\065\065\125\073\067\001\002" +
    "\000\050\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050" +
    "\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\057\uff7f\060\uff7f" +
    "\061\uff7f\062\uff7f\065\uff7f\070\uff7f\071\uff7f\072\uff7f\073" +
    "\uff7f\001\002\000\050\043\uff90\044\uff90\045\uff90\046\uff90" +
    "\047\uff90\050\uff90\052\uff90\053\uff90\054\uff90\055\uff90\057" +
    "\uff90\060\uff90\061\uff90\062\uff90\065\uff90\070\uff90\071\uff90" +
    "\072\uff90\073\uff90\001\002\000\050\043\uff86\044\uff86\045" +
    "\uff86\046\uff86\047\uff86\050\uff86\052\uff86\053\uff86\054\uff86" +
    "\055\uff86\057\uff86\060\uff86\061\uff86\062\uff86\065\uff86\070" +
    "\uff86\071\uff86\072\uff86\073\uff86\001\002\000\050\043\uff85" +
    "\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85\052\uff85\053" +
    "\uff85\054\uff85\055\uff85\057\uff85\060\uff85\061\uff85\062\uff85" +
    "\065\uff85\070\uff85\071\uff85\072\uff85\073\uff85\001\002\000" +
    "\042\006\006\007\005\010\004\011\013\012\010\026\054" +
    "\027\036\032\037\033\041\034\051\035\052\036\040\044" +
    "\042\063\053\064\056\065\134\001\002\000\006\065\135" +
    "\070\136\001\002\000\044\043\075\044\062\045\073\046" +
    "\072\047\063\050\066\052\071\053\074\054\061\055\070" +
    "\057\077\060\076\061\100\062\065\065\uff81\070\uff81\073" +
    "\067\001\002\000\050\043\uff83\044\uff83\045\uff83\046\uff83" +
    "\047\uff83\050\uff83\052\uff83\053\uff83\054\uff83\055\uff83\057" +
    "\uff83\060\uff83\061\uff83\062\uff83\065\uff83\070\uff83\071\uff83" +
    "\072\uff83\073\uff83\001\002\000\050\043\uff84\044\uff84\045" +
    "\uff84\046\uff84\047\uff84\050\uff84\052\uff84\053\uff84\054\uff84" +
    "\055\uff84\057\uff84\060\uff84\061\uff84\062\uff84\065\uff84\070" +
    "\uff84\071\uff84\072\uff84\073\uff84\001\002\000\040\006\006" +
    "\007\005\010\004\011\013\012\010\026\054\027\036\032" +
    "\037\033\041\034\051\035\052\036\040\044\042\063\053" +
    "\064\056\001\002\000\044\043\075\044\062\045\073\046" +
    "\072\047\063\050\066\052\071\053\074\054\061\055\070" +
    "\057\077\060\076\061\100\062\065\065\uff82\070\uff82\073" +
    "\067\001\002\000\016\006\006\007\005\010\004\011\013" +
    "\012\010\065\141\001\002\000\004\066\151\001\002\000" +
    "\006\065\145\070\146\001\002\000\004\036\144\001\002" +
    "\000\006\065\uffed\070\uffed\001\002\000\004\066\151\001" +
    "\002\000\014\006\006\007\005\010\004\011\013\012\010" +
    "\001\002\000\004\036\150\001\002\000\006\065\uffee\070" +
    "\uffee\001\002\000\046\003\175\006\006\007\005\010\004" +
    "\011\013\012\010\013\173\015\165\016\170\017\200\020" +
    "\172\023\205\024\176\025\166\030\202\031\153\036\155" +
    "\067\154\001\002\000\024\002\ufff2\003\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\001\002" +
    "\000\004\064\351\001\002\000\062\002\uffbd\003\uffbd\004" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\030\uffbd\031\uffbd" +
    "\036\uffbd\067\uffbd\001\002\000\016\037\127\040\130\041" +
    "\332\042\331\056\305\064\131\001\002\000\052\003\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\030\uffb6\031\uffb6\036\uffb6\067\uffb6\001" +
    "\002\000\052\003\uffba\006\uffba\007\uffba\010\uffba\011\uffba" +
    "\012\uffba\013\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\025\uffba\030\uffba\031\uffba" +
    "\036\uffba\067\uffba\001\002\000\052\003\uffb5\006\uffb5\007" +
    "\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\030\uffb5\031\uffb5\036\uffb5\067\uffb5\001\002\000\052" +
    "\003\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\030\uffb8\031\uffb8\036\uffb8\067" +
    "\uffb8\001\002\000\052\003\uffb9\006\uffb9\007\uffb9\010\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\030\uffb9" +
    "\031\uffb9\036\uffb9\067\uffb9\001\002\000\046\003\175\006" +
    "\006\007\005\010\004\011\013\012\010\013\173\015\165" +
    "\016\170\017\200\020\172\023\205\024\176\025\166\030" +
    "\202\031\153\036\155\067\350\001\002\000\004\036\033" +
    "\001\002\000\004\064\275\001\002\000\042\006\006\007" +
    "\005\010\004\011\013\012\010\026\054\027\036\032\037" +
    "\033\041\034\051\035\052\036\040\044\042\063\053\064" +
    "\056\072\273\001\002\000\004\072\271\001\002\000\004" +
    "\064\265\001\002\000\052\003\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\030" +
    "\uffbb\031\uffbb\036\uffbb\067\uffbb\001\002\000\004\064\236" +
    "\001\002\000\004\064\227\001\002\000\052\003\uffb0\006" +
    "\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\030\uffb0\031\uffb0\036\uffb0\067\uffb0\001\002" +
    "\000\052\003\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012" +
    "\uffab\013\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\030\uffab\031\uffab\036" +
    "\uffab\067\uffab\001\002\000\004\072\226\001\002\000\004" +
    "\072\225\001\002\000\004\066\151\001\002\000\004\072" +
    "\216\001\002\000\004\064\210\001\002\000\052\003\uffb7" +
    "\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\030\uffb7\031\uffb7\036\uffb7\067\uffb7\001" +
    "\002\000\004\072\207\001\002\000\004\072\206\001\002" +
    "\000\052\003\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\013\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\025\uffac\030\uffac\031\uffac\036" +
    "\uffac\067\uffac\001\002\000\052\003\uffb1\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\030\uffb1\031\uffb1\036\uffb1\067\uffb1\001\002\000\042\006" +
    "\006\007\005\010\004\011\013\012\010\026\054\027\036" +
    "\032\037\033\041\034\051\035\052\036\040\044\042\063" +
    "\053\064\056\065\212\001\002\000\042\043\075\044\062" +
    "\045\073\046\072\047\063\050\066\052\071\053\074\054" +
    "\061\055\070\057\077\060\076\061\100\062\065\065\214" +
    "\073\067\001\002\000\004\072\213\001\002\000\052\003" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\030\uffc0\031\uffc0\036\uffc0\067\uffc0" +
    "\001\002\000\004\072\215\001\002\000\052\003\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\030\uffc1\031\uffc1\036\uffc1\067\uffc1\001\002" +
    "\000\052\003\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\030\uffb3\031\uffb3\036" +
    "\uffb3\067\uffb3\001\002\000\004\016\220\001\002\000\004" +
    "\064\221\001\002\000\040\006\006\007\005\010\004\011" +
    "\013\012\010\026\054\027\036\032\037\033\041\034\051" +
    "\035\052\036\040\044\042\063\053\064\056\001\002\000" +
    "\042\043\075\044\062\045\073\046\072\047\063\050\066" +
    "\052\071\053\074\054\061\055\070\057\077\060\076\061" +
    "\100\062\065\065\223\073\067\001\002\000\004\072\224" +
    "\001\002\000\052\003\uffc5\006\uffc5\007\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\030\uffc5\031" +
    "\uffc5\036\uffc5\067\uffc5\001\002\000\052\003\uffb4\006\uffb4" +
    "\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\030\uffb4\031\uffb4\036\uffb4\067\uffb4\001\002\000" +
    "\052\003\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad" +
    "\013\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022" +
    "\uffad\023\uffad\024\uffad\025\uffad\030\uffad\031\uffad\036\uffad" +
    "\067\uffad\001\002\000\040\006\006\007\005\010\004\011" +
    "\013\012\010\026\054\027\036\032\037\033\041\034\051" +
    "\035\052\036\040\044\042\063\053\064\056\001\002\000" +
    "\042\043\075\044\062\045\073\046\072\047\063\050\066" +
    "\052\071\053\074\054\061\055\070\057\077\060\076\061" +
    "\100\062\065\065\231\073\067\001\002\000\004\066\151" +
    "\001\002\000\054\003\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\233\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\030" +
    "\uffea\031\uffea\036\uffea\067\uffea\001\002\000\006\013\173" +
    "\066\151\001\002\000\052\003\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\030" +
    "\uffeb\031\uffeb\036\uffeb\067\uffeb\001\002\000\052\003\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec" +
    "\024\uffec\025\uffec\030\uffec\031\uffec\036\uffec\067\uffec\001" +
    "\002\000\040\006\006\007\005\010\004\011\013\012\010" +
    "\026\054\027\036\032\037\033\041\034\051\035\052\036" +
    "\040\044\042\063\053\064\056\001\002\000\042\043\075" +
    "\044\062\045\073\046\072\047\063\050\066\052\071\053" +
    "\074\054\061\055\070\057\077\060\076\061\100\062\065" +
    "\065\240\073\067\001\002\000\004\066\241\001\002\000" +
    "\010\021\246\022\251\067\244\001\002\000\052\003\uffe9" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\030\uffe9\031\uffe9\036\uffe9\067\uffe9\001" +
    "\002\000\004\067\uffe4\001\002\000\052\003\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\030\uffe7\031\uffe7\036\uffe7\067\uffe7\001\002\000" +
    "\010\021\246\022\251\067\uffe5\001\002\000\040\006\006" +
    "\007\005\010\004\011\013\012\010\026\054\027\036\032" +
    "\037\033\041\034\051\035\052\036\040\044\042\063\053" +
    "\064\056\001\002\000\004\067\256\001\002\000\010\021" +
    "\uffe2\022\uffe2\067\uffe2\001\002\000\004\071\252\001\002" +
    "\000\050\003\175\006\006\007\005\010\004\011\013\012" +
    "\010\013\173\015\165\016\170\017\200\020\172\023\205" +
    "\024\176\025\166\030\202\031\153\036\155\066\151\067" +
    "\uffdc\001\002\000\046\003\175\006\006\007\005\010\004" +
    "\011\013\012\010\013\173\015\165\016\170\017\200\020" +
    "\172\023\205\024\176\025\166\030\202\031\153\036\155" +
    "\067\uffde\001\002\000\004\067\uffdd\001\002\000\052\003" +
    "\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\030\uffbc\031\uffbc\036\uffbc\067\uffbc" +
    "\001\002\000\052\003\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\030\uffe8\031" +
    "\uffe8\036\uffe8\067\uffe8\001\002\000\042\043\075\044\062" +
    "\045\073\046\072\047\063\050\066\052\071\053\074\054" +
    "\061\055\070\057\077\060\076\061\100\062\065\071\260" +
    "\073\067\001\002\000\054\003\175\006\006\007\005\010" +
    "\004\011\013\012\010\013\173\015\165\016\170\017\200" +
    "\020\172\021\uffdf\022\uffdf\023\205\024\176\025\166\030" +
    "\202\031\153\036\155\066\151\067\uffdf\001\002\000\052" +
    "\003\175\006\006\007\005\010\004\011\013\012\010\013" +
    "\173\015\165\016\170\017\200\020\172\021\uffe1\022\uffe1" +
    "\023\205\024\176\025\166\030\202\031\153\036\155\067" +
    "\uffe1\001\002\000\010\021\uffe0\022\uffe0\067\uffe0\001\002" +
    "\000\004\067\uffe6\001\002\000\010\021\uffe3\022\uffe3\067" +
    "\uffe3\001\002\000\040\006\006\007\005\010\004\011\013" +
    "\012\010\026\054\027\036\032\037\033\041\034\051\035" +
    "\052\036\040\044\042\063\053\064\056\001\002\000\042" +
    "\043\075\044\062\045\073\046\072\047\063\050\066\052" +
    "\071\053\074\054\061\055\070\057\077\060\076\061\100" +
    "\062\065\065\267\073\067\001\002\000\004\066\151\001" +
    "\002\000\052\003\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\013\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\030\uffc6\031\uffc6" +
    "\036\uffc6\067\uffc6\001\002\000\052\003\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\030\uffb2\031\uffb2\036\uffb2\067\uffb2\001\002\000\042" +
    "\043\075\044\062\045\073\046\072\047\063\050\066\052" +
    "\071\053\074\054\061\055\070\057\077\060\076\061\100" +
    "\062\065\072\274\073\067\001\002\000\052\003\uffae\006" +
    "\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\015\uffae" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\030\uffae\031\uffae\036\uffae\067\uffae\001\002" +
    "\000\052\003\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\030\uffaf\031\uffaf\036" +
    "\uffaf\067\uffaf\001\002\000\020\006\006\007\005\010\004" +
    "\011\013\012\010\036\304\072\277\001\002\000\006\070" +
    "\346\072\uffd1\001\002\000\042\006\006\007\005\010\004" +
    "\011\013\012\010\026\054\027\036\032\037\033\041\034" +
    "\051\035\052\036\040\044\042\063\053\064\056\072\342" +
    "\001\002\000\004\072\320\001\002\000\004\036\312\001" +
    "\002\000\004\065\307\001\002\000\006\070\uffcc\072\uffcc" +
    "\001\002\000\004\056\305\001\002\000\040\006\006\007" +
    "\005\010\004\011\013\012\010\026\054\027\036\032\037" +
    "\033\041\034\051\035\052\036\040\044\042\063\053\064" +
    "\056\001\002\000\046\043\075\044\062\045\073\046\072" +
    "\047\063\050\066\052\071\053\074\054\061\055\070\057" +
    "\077\060\076\061\100\062\065\065\uffc4\070\uffc4\072\uffc4" +
    "\073\067\001\002\000\004\066\151\001\002\000\052\003" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\030\uffdb\031\uffdb\036\uffdb\067\uffdb" +
    "\001\002\000\006\070\uffcf\072\uffcf\001\002\000\004\056" +
    "\316\001\002\000\006\070\314\072\uffd2\001\002\000\004" +
    "\036\312\001\002\000\006\070\uffd0\072\uffd0\001\002\000" +
    "\040\006\006\007\005\010\004\011\013\012\010\026\054" +
    "\027\036\032\037\033\041\034\051\035\052\036\040\044" +
    "\042\063\053\064\056\001\002\000\044\043\075\044\062" +
    "\045\073\046\072\047\063\050\066\052\071\053\074\054" +
    "\061\055\070\057\077\060\076\061\100\062\065\070\uffce" +
    "\072\uffce\073\067\001\002\000\042\006\006\007\005\010" +
    "\004\011\013\012\010\026\054\027\036\032\037\033\041" +
    "\034\051\035\052\036\040\044\042\063\053\064\056\072" +
    "\322\001\002\000\042\043\075\044\062\045\073\046\072" +
    "\047\063\050\066\052\071\053\074\054\061\055\070\057" +
    "\077\060\076\061\100\062\065\072\337\073\067\001\002" +
    "\000\006\036\326\065\uffd6\001\002\000\006\065\uffca\070" +
    "\uffca\001\002\000\006\065\uffc9\070\uffc9\001\002\000\006" +
    "\065\uffd8\070\335\001\002\000\014\037\127\040\130\041" +
    "\332\042\331\056\305\001\002\000\006\065\uffc7\070\uffc7" +
    "\001\002\000\006\065\uffc8\070\uffc8\001\002\000\040\006" +
    "\006\007\005\010\004\011\013\012\010\026\054\027\036" +
    "\032\037\033\041\034\051\035\052\036\040\044\042\063" +
    "\053\064\056\001\002\000\040\006\006\007\005\010\004" +
    "\011\013\012\010\026\054\027\036\032\037\033\041\034" +
    "\051\035\052\036\040\044\042\063\053\064\056\001\002" +
    "\000\046\043\075\044\062\045\073\046\072\047\063\050" +
    "\066\052\071\053\074\054\061\055\070\057\077\060\076" +
    "\061\100\062\065\065\uffc3\070\uffc3\072\uffc3\073\067\001" +
    "\002\000\046\043\075\044\062\045\073\046\072\047\063" +
    "\050\066\052\071\053\074\054\061\055\070\057\077\060" +
    "\076\061\100\062\065\065\uffc2\070\uffc2\072\uffc2\073\067" +
    "\001\002\000\004\036\326\001\002\000\006\065\uffcb\070" +
    "\uffcb\001\002\000\006\036\326\065\uffd9\001\002\000\006" +
    "\065\uffda\070\335\001\002\000\042\043\075\044\062\045" +
    "\073\046\072\047\063\050\066\052\071\053\074\054\061" +
    "\055\070\057\077\060\076\061\100\062\065\072\344\073" +
    "\067\001\002\000\006\036\326\065\uffd3\001\002\000\006" +
    "\065\uffd4\070\335\001\002\000\006\036\326\065\uffd5\001" +
    "\002\000\006\065\uffd7\070\335\001\002\000\004\036\304" +
    "\001\002\000\006\070\uffcd\072\uffcd\001\002\000\062\002" +
    "\uffbe\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\030\uffbe\031\uffbe\036\uffbe\067\uffbe\001\002\000\040\006" +
    "\006\007\005\010\004\011\013\012\010\026\054\027\036" +
    "\032\037\033\041\034\051\035\052\036\040\044\042\063" +
    "\053\064\056\001\002\000\042\043\075\044\062\045\073" +
    "\046\072\047\063\050\066\052\071\053\074\054\061\055" +
    "\070\057\077\060\076\061\100\062\065\065\353\073\067" +
    "\001\002\000\004\072\354\001\002\000\052\003\uffbf\006" +
    "\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\015\uffbf" +
    "\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\030\uffbf\031\uffbf\036\uffbf\067\uffbf\001\002" +
    "\000\024\002\ufff0\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\001\002\000\004\064\357" +
    "\001\002\000\016\006\006\007\005\010\004\011\013\012" +
    "\010\065\360\001\002\000\004\066\151\001\002\000\006" +
    "\065\362\070\146\001\002\000\004\066\151\001\002\000" +
    "\024\002\ufff1\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\001\002\000\024\002\uffef\003" +
    "\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\001\002\000\004\072\367\001\002\000\004\064" +
    "\131\001\002\000\024\002\ufff8\003\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\020\002\021\003\017\017\015\020\010\023" +
    "\020\024\006\051\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\364\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\026\027\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\015" +
    "\020\023\023\020\024\006\051\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\043\010\047\011\045\012" +
    "\054\013\046\014\056\015\034\016\042\051\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\007\125\010\047" +
    "\011\045\012\054\013\046\014\056\015\034\016\042\051" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\007\121" +
    "\010\047\011\045\012\054\013\046\014\056\015\034\016" +
    "\042\051\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\007\057\010\047\011\045\012\054\013\046\014" +
    "\056\015\034\016\042\051\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\120\010\047\011\045\012" +
    "\054\013\046\014\056\015\034\016\042\051\044\001\001" +
    "\000\024\007\117\010\047\011\045\012\054\013\046\014" +
    "\056\015\034\016\042\051\044\001\001\000\024\007\116" +
    "\010\047\011\045\012\054\013\046\014\056\015\034\016" +
    "\042\051\044\001\001\000\002\001\001\000\024\007\115" +
    "\010\047\011\045\012\054\013\046\014\056\015\034\016" +
    "\042\051\044\001\001\000\024\007\114\010\047\011\045" +
    "\012\054\013\046\014\056\015\034\016\042\051\044\001" +
    "\001\000\024\007\111\010\047\011\045\012\054\013\046" +
    "\014\056\015\034\016\042\051\044\001\001\000\024\007" +
    "\110\010\047\011\045\012\054\013\046\014\056\015\034" +
    "\016\042\051\044\001\001\000\024\007\107\010\047\011" +
    "\045\012\054\013\046\014\056\015\034\016\042\051\044" +
    "\001\001\000\024\007\106\010\047\011\045\012\054\013" +
    "\046\014\056\015\034\016\042\051\044\001\001\000\024" +
    "\007\105\010\047\011\045\012\054\013\046\014\056\015" +
    "\034\016\042\051\044\001\001\000\024\007\104\010\047" +
    "\011\045\012\054\013\046\014\056\015\034\016\042\051" +
    "\044\001\001\000\024\007\103\010\047\011\045\012\054" +
    "\013\046\014\056\015\034\016\042\051\044\001\001\000" +
    "\024\007\102\010\047\011\045\012\054\013\046\014\056" +
    "\015\034\016\042\051\044\001\001\000\024\007\101\010" +
    "\047\011\045\012\054\013\046\014\056\015\034\016\042" +
    "\051\044\001\001\000\024\007\100\010\047\011\045\012" +
    "\054\013\046\014\056\015\034\016\042\051\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\007\113\010\047\011\045\012\054\013\046" +
    "\014\056\015\034\016\042\051\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\007\123\010\047\011\045\012\054\013\046\014\056" +
    "\015\034\016\042\051\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\131\007\132\010\047\011\045\012" +
    "\054\013\046\014\056\015\034\016\042\051\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\007\136\010\047\011\045\012\054" +
    "\013\046\014\056\015\034\016\042\051\044\001\001\000" +
    "\002\001\001\000\006\006\141\051\142\001\001\000\004" +
    "\052\354\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\151\001\001\000\004\051\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\162\013\166\014\203\021\173\022\200\023\156\031\170" +
    "\032\161\033\160\043\176\045\155\046\157\047\202\051" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\013\166\014\203\021\173\022\200\023\156\031" +
    "\254\032\161\033\160\043\176\045\155\046\157\047\202" +
    "\051\163\001\001\000\006\025\026\027\024\001\001\000" +
    "\002\001\001\000\024\007\271\010\047\011\045\012\054" +
    "\013\046\014\056\015\034\016\042\051\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\210\010\047\011\045\012" +
    "\054\013\046\014\056\015\034\016\042\051\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\007\221\010\047\011" +
    "\045\012\054\013\046\014\056\015\034\016\042\051\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\007\227" +
    "\010\047\011\045\012\054\013\046\014\056\015\034\016" +
    "\042\051\044\001\001\000\002\001\001\000\004\052\231" +
    "\001\001\000\002\001\001\000\006\032\234\052\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\007\236" +
    "\010\047\011\045\012\054\013\046\014\056\015\034\016" +
    "\042\051\044\001\001\000\002\001\001\000\004\034\241" +
    "\001\001\000\012\035\246\037\244\040\247\053\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\263\053\262\001\001\000\024\007\256\010" +
    "\047\011\045\012\054\013\046\014\056\015\034\016\042" +
    "\051\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\252\013\166\014\203\021\173" +
    "\022\200\023\156\031\170\032\161\033\160\043\176\045" +
    "\155\046\157\047\202\051\163\052\253\001\001\000\034" +
    "\013\166\014\203\021\173\022\200\023\156\031\254\032" +
    "\161\033\160\043\176\045\155\046\157\047\202\051\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\260\013\166\014\203" +
    "\021\173\022\200\023\156\031\170\032\161\033\160\043" +
    "\176\045\155\046\157\047\202\051\163\052\261\001\001" +
    "\000\034\013\166\014\203\021\173\022\200\023\156\031" +
    "\254\032\161\033\160\043\176\045\155\046\157\047\202" +
    "\051\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\007\265\010\047\011\045\012\054" +
    "\013\046\014\056\015\034\016\042\051\044\001\001\000" +
    "\002\001\001\000\004\052\267\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\036\301\042\275\043\302\044\277" +
    "\051\300\001\001\000\002\001\001\000\024\007\340\010" +
    "\047\011\045\012\054\013\046\014\056\015\034\016\042" +
    "\051\044\001\001\000\002\001\001\000\006\026\312\030" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\007\305\010\047\011\045\012\054\013" +
    "\046\014\056\015\034\016\042\051\044\001\001\000\002" +
    "\001\001\000\004\052\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\314\001\001\000\002\001\001\000\024\007\316\010" +
    "\047\011\045\012\054\013\046\014\056\015\034\016\042" +
    "\051\044\001\001\000\002\001\001\000\024\007\320\010" +
    "\047\011\045\012\054\013\046\014\056\015\034\016\042" +
    "\051\044\001\001\000\002\001\001\000\014\013\323\022" +
    "\326\041\324\043\327\050\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\007\333\010\047" +
    "\011\045\012\054\013\046\014\056\015\034\016\042\051" +
    "\044\001\001\000\024\007\332\010\047\011\045\012\054" +
    "\013\046\014\056\015\034\016\042\051\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\323\022\326" +
    "\043\327\050\335\001\001\000\002\001\001\000\014\013" +
    "\323\022\326\041\337\043\327\050\322\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\323\022\326\041" +
    "\342\043\327\050\322\001\001\000\002\001\001\000\014" +
    "\013\323\022\326\041\344\043\327\050\322\001\001\000" +
    "\002\001\001\000\004\043\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\351\010\047\011\045\012" +
    "\054\013\046\014\056\015\034\016\042\051\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\360\051\142" +
    "\001\001\000\004\052\363\001\001\000\002\001\001\000" +
    "\004\052\362\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @SuppressWarnings("deprecation")
    public Parser(Scanner s) {
        super(s);
    }
    public void syntax_error(Symbol sym) {
        Outs.errors.add(new Error(sym.left, sym.right, TypeError.SYNTAX, "No se esperaba «" + sym.value + "»"));
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {
        Outs.errors.add(new Error(sym.left, sym.right, TypeError.SYNTAX, "No se esperaba (0) «" + sym.value + "»"));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> start_val = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= INSTSGLOBAL 
            {
              ArrayList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= 
            {
              ArrayList<Instruction> RESULT =null;
		RESULT = new ArrayList<>();   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTSGLOBAL ::= INSTSGLOBAL INSTGLOBAL 
            {
              ArrayList<Instruction> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> l = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l; RESULT.add(i);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTSGLOBAL ::= INSTGLOBAL 
            {
              ArrayList<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(i));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTGLOBAL ::= CALLMAINFUNC 
            {
              Instruction RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTGLOBAL ::= INITVAR 
            {
              Instruction RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTGLOBAL ::= DECLFUNC 
            {
              Instruction RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTGLOBAL ::= error 
            {
              Instruction RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CALLMAINFUNC ::= RW_main CALLFUNC TK_semicolon 
            {
              Instruction RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int callMainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int callMainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression callMain = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new MainMethod(mleft, mright, callMain);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLMAINFUNC",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INITVAR ::= TYPE INITIDS TK_semicolon 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<IDValue> arr = (ArrayList<IDValue>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new InitVar(tleft, tright, arr, t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INITVAR",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INITIDS ::= INITIDS TK_comma INITID 
            {
              ArrayList<IDValue> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<IDValue> l = (ArrayList<IDValue>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IDValue i = (IDValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l; RESULT.add(i);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INITIDS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INITIDS ::= INITID 
            {
              ArrayList<IDValue> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IDValue i = (IDValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(i));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INITIDS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INITID ::= TK_id TK_equ EXP 
            {
              IDValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IDValue(idleft, idright, id, exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INITID",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INITID ::= TK_id 
            {
              IDValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IDValue(idleft, idright, id, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INITID",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLFUNC ::= TYPE TK_id TK_lpar LISTPARAMS TK_rpar ENV 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Parameter> l = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Function(tleft, tright, id, l,                 b, t);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLFUNC",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLFUNC ::= RW_void TK_id TK_lpar LISTPARAMS TK_rpar ENV 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Parameter> l = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Function(tleft, tright, id, l,                 b, Type.NULL);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLFUNC",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLFUNC ::= TYPE TK_id TK_lpar TK_rpar ENV 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Function(tleft, tright, id, new ArrayList<>(), b, t);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLFUNC",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLFUNC ::= RW_void TK_id TK_lpar TK_rpar ENV 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Function(tleft, tright, id, new ArrayList<>(), b, Type.NULL);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLFUNC",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTPARAMS ::= LISTPARAMS TK_comma TYPE TK_id 
            {
              ArrayList<Parameter> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Parameter> l = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l; RESULT.add(new Parameter(tleft, tright, id, t));                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTPARAMS ::= TYPE TK_id 
            {
              ArrayList<Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(new Parameter(tleft, tright, id, t)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IF ::= RW_if TK_lpar EXP TK_rpar ENV RW_else IF 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement b2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(rleft, rright, cn, b1, b2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IF ::= RW_if TK_lpar EXP TK_rpar ENV RW_else ENV 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(rleft, rright, cn, b1, b2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF ::= RW_if TK_lpar EXP TK_rpar ENV 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(rleft, rright, cn, b1, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SWITCH ::= RW_switch TK_lpar EXP TK_rpar ENVS 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object[] b = (Object[])((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Switch(sleft, sright, exp, (ArrayList<Case>) b[0], (Block) b[1]);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ENVS ::= TK_lbrc CASESDEFAULT TK_rbrc 
            {
              Object[] RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object[] cd = (Object[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = cd;                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVS",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ENVS ::= TK_lbrc TK_rbrc 
            {
              Object[] RESULT =null;
		RESULT = new Object[] {null, null};
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVS",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CASESDEFAULT ::= CASES DEFAULT 
            {
              Object[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> c = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block d = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Object[] {c,    d};   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CASESDEFAULT ::= CASES 
            {
              Object[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> c = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Object[] {c,    null};
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CASESDEFAULT ::= DEFAULT 
            {
              Object[] RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block d = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Object[] {null, d};   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CASES ::= CASES CASE 
            {
              ArrayList<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l; RESULT.add(c);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CASES ::= CASE 
            {
              ArrayList<Statement> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(c));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CASE ::= RW_case EXP TK_colon INSTRUCTIONS 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> b = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Case(cleft, cright, exp, new Block(bleft, bright, b));                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CASE ::= RW_case EXP TK_colon ENV 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Case(cleft, cright, exp, b);                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CASE ::= RW_case EXP TK_colon 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Case(cleft, cright, exp, new Block(cleft, cright, new ArrayList<>()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEFAULT ::= RW_default TK_colon INSTRUCTIONS 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> b = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Block(dleft, dright, b);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEFAULT ::= RW_default TK_colon ENV 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b;                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEFAULT ::= RW_default TK_colon 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Block(dleft, dright, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FOR ::= RW_for TK_lpar ARGSFOR TK_rpar ENV 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object[] args = (Object[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new For(fleft, fright, (InitializeFor) args[0], (Expression) args[1], (ArrayList<Statement>) args[2], b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARGSFOR ::= INITIALIZEFOR TK_semicolon EXP TK_semicolon UPDATESFOR 
            {
              Object[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		InitializeFor i = (InitializeFor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> u = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Object[] {i,    e,    u};   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGSFOR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARGSFOR ::= INITIALIZEFOR TK_semicolon EXP TK_semicolon 
            {
              Object[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		InitializeFor i = (InitializeFor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Object[] {i,    e,    null};
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGSFOR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARGSFOR ::= INITIALIZEFOR TK_semicolon TK_semicolon UPDATESFOR 
            {
              Object[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		InitializeFor i = (InitializeFor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> u = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Object[] {i,    null, u};   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGSFOR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARGSFOR ::= TK_semicolon EXP TK_semicolon UPDATESFOR 
            {
              Object[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> u = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Object[] {null, e,    u};   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGSFOR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARGSFOR ::= INITIALIZEFOR TK_semicolon TK_semicolon 
            {
              Object[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InitializeFor i = (InitializeFor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new Object[] {i,    null, null};
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGSFOR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ARGSFOR ::= TK_semicolon EXP TK_semicolon 
            {
              Object[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Object[] {null, e,    null};
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGSFOR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARGSFOR ::= TK_semicolon TK_semicolon UPDATESFOR 
            {
              Object[] RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> u = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Object[] {null, null, u};   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGSFOR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARGSFOR ::= TK_semicolon TK_semicolon 
            {
              Object[] RESULT =null;
		RESULT = new Object[] {null, null, null};
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGSFOR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INITIALIZEFOR ::= TYPE INITIDSFOR 
            {
              InitializeFor RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<IDValue> r = (ArrayList<IDValue>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new InitializeFor(new InitVar(tleft, tright, r, t));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INITIALIZEFOR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INITIALIZEFOR ::= ASSIGNS 
            {
              InitializeFor RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Instruction> r = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new InitializeFor(r);                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INITIALIZEFOR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INITIDSFOR ::= INITIDSFOR TK_comma INITIDFOR 
            {
              ArrayList<IDValue> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<IDValue> l = (ArrayList<IDValue>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IDValue i = (IDValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l; RESULT.add(i);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INITIDSFOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INITIDSFOR ::= INITIDFOR 
            {
              ArrayList<IDValue> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IDValue i = (IDValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(i));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INITIDSFOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INITIDFOR ::= TK_id TK_equ EXP 
            {
              IDValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IDValue(idleft, idright, id, exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INITIDFOR",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASSIGNS ::= ASSIGNS TK_comma ASSIGN 
            {
              ArrayList<Instruction> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> l = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction r = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l; RESULT.add(r);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASSIGNS ::= ASSIGN 
            {
              ArrayList<Instruction> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction r = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(r));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // UPDATESFOR ::= UPDATESFOR TK_comma UPDATEFOR 
            {
              ArrayList<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int upleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int upright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement up = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l; RESULT.add(up);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UPDATESFOR",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // UPDATESFOR ::= UPDATEFOR 
            {
              ArrayList<Statement> RESULT =null;
		int upleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int upright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement up = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(up));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UPDATESFOR",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // UPDATEFOR ::= INCDEC 
            {
              Statement RESULT =null;
		int updateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression update = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = update;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // UPDATEFOR ::= ASSIGN 
            {
              Statement RESULT =null;
		int updateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction update = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = update;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // UPDATEFOR ::= ADDSUB 
            {
              Statement RESULT =null;
		int updateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction update = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = update;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WHILE ::= RW_while TK_lpar EXP TK_rpar ENV 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new While(wleft, wright, exp, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DOWHILE ::= RW_do ENV RW_while TK_lpar EXP TK_rpar TK_semicolon 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DoWhile(dleft, dright, exp, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASSIGN ::= TK_id TK_equ EXP 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Assign(idleft, idright, id, exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ADDSUB ::= TK_id TK_add EXP 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new AddSub(idleft, idright, id, s, exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADDSUB",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ADDSUB ::= TK_id TK_sub EXP 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new AddSub(idleft, idright, id, s, exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADDSUB",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PRINT ::= RW_println TK_lpar EXP TK_rpar TK_semicolon 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new Print(pleft, pright, exp,  true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PRINT ::= RW_println TK_lpar TK_rpar TK_semicolon 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new Print(pleft, pright, null, true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PRINT ::= RW_print TK_lpar EXP TK_rpar TK_semicolon 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new Print(pleft, pright, exp, false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ENV ::= TK_lbrc INSTRUCTIONS TK_rbrc 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> ins = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Block(lleft, lright, ins);              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENV",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ENV ::= TK_lbrc TK_rbrc 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Block(lleft, lright, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENV",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              ArrayList<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l; RESULT.add(i);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INSTRUCTIONS ::= INSTRUCTION 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(i));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INSTRUCTION ::= INITVAR 
            {
              Statement RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INSTRUCTION ::= IF 
            {
              Statement RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement ins = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INSTRUCTION ::= SWITCH 
            {
              Statement RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement ins = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INSTRUCTION ::= FOR 
            {
              Statement RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement ins = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INSTRUCTION ::= WHILE 
            {
              Statement RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement ins = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INSTRUCTION ::= DOWHILE 
            {
              Statement RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement ins = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INSTRUCTION ::= ASSIGN TK_semicolon 
            {
              Statement RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTRUCTION ::= ADDSUB TK_semicolon 
            {
              Statement RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INSTRUCTION ::= INCDEC TK_semicolon 
            {
              Statement RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression ins = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INSTRUCTION ::= CALLFUNC TK_semicolon 
            {
              Statement RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression ins = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INSTRUCTION ::= PRINT 
            {
              Statement RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INSTRUCTION ::= RW_return EXP TK_semicolon 
            {
              Statement RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Return(insleft, insright, exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INSTRUCTION ::= RW_return TK_semicolon 
            {
              Statement RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Return(insleft, insright, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUCTION ::= RW_continue TK_semicolon 
            {
              Statement RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Continue(insleft, insright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTRUCTION ::= RW_break TK_semicolon 
            {
              Statement RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Break(insleft, insright);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUCTION ::= error 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TYPE ::= RW_String 
            {
              Type RESULT =null;
		RESULT = Type.STRING; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TYPE ::= RW_int 
            {
              Type RESULT =null;
		RESULT = Type.INT;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TYPE ::= RW_boolean 
            {
              Type RESULT =null;
		RESULT = Type.BOOLEAN;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TYPE ::= RW_char 
            {
              Type RESULT =null;
		RESULT = Type.CHAR;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TYPE ::= RW_double 
            {
              Type RESULT =null;
		RESULT = Type.DOUBLE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= ARITHMETICS 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= RELATIONALS 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= LOGICS 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= INCDEC 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= CALLFUNC 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= TERNARY 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= CAST 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= TK_id 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new AccessVar(idleft, idright, id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= TK_string 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= TK_char 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.CHAR);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= TK_int 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.INT);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= TK_double 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.DOUBLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= RW_true 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.BOOLEAN);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= RW_false 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.BOOLEAN);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= TK_lpar EXP TK_rpar 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ARITHMETICS ::= EXP TK_div EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ARITHMETICS ::= EXP TK_pow EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ARITHMETICS ::= EXP TK_mod EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ARITHMETICS ::= TK_minus EXP 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(sleft, sright, null, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // RELATIONALS ::= EXP TK_equequ EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // RELATIONALS ::= EXP TK_notequ EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // RELATIONALS ::= EXP TK_lessequ EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // RELATIONALS ::= EXP TK_moreequ EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // RELATIONALS ::= EXP TK_less EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // RELATIONALS ::= EXP TK_more EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LOGICS ::= EXP TK_and EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LOGICS ::= EXP TK_or EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LOGICS ::= TK_not EXP 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logic(sleft, sright, null, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INCDEC ::= TK_id TK_inc 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IncDec(idleft, idright, id, s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCDEC",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // INCDEC ::= TK_id TK_dec 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IncDec(idleft, idright, id, s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCDEC",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CALLFUNC ::= TK_id TK_lpar LISTARGS TK_rpar 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expression> l = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new CallFunction(idleft, idright, id, l);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLFUNC",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CALLFUNC ::= TK_id TK_lpar TK_rpar 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new CallFunction(idleft, idright, id, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLFUNC",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LISTARGS ::= LISTARGS TK_comma EXP 
            {
              ArrayList<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expression> l = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l; RESULT.add(e1);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTARGS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LISTARGS ::= EXP 
            {
              ArrayList<Expression> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(e1));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTARGS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TERNARY ::= EXP TK_question EXP TK_colon EXP 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression n = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Ternary(cleft, cright, c, y, n);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERNARY",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CAST ::= TYPE TK_lpar EXP TK_rpar 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Cast(tleft, tright, exp, t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CAST",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
